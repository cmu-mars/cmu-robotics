# coding: utf-8

"""
    cmu mars brass th: phase 2, cp2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TestQoS(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'duration': 'object',
        'proximity': 'object',
        'collisions': 'object'
    }

    attribute_map = {
        'duration': 'duration',
        'proximity': 'proximity',
        'collisions': 'collisions'
    }

    def __init__(self, duration=None, proximity=None, collisions=None):
        """
        TestQoS - a model defined in Swagger
        """

        self._duration = None
        self._proximity = None
        self._collisions = None

        self.duration = duration
        self.proximity = proximity
        self.collisions = collisions

    @property
    def duration(self):
        """
        Gets the duration of this TestQoS.
        A measure of service quality with respect to time taken to complete the test.

        :return: The duration of this TestQoS.
        :rtype: object
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this TestQoS.
        A measure of service quality with respect to time taken to complete the test.

        :param duration: The duration of this TestQoS.
        :type: object
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def proximity(self):
        """
        Gets the proximity of this TestQoS.
        A measure of service quality with respect to proximity to the goal.

        :return: The proximity of this TestQoS.
        :rtype: object
        """
        return self._proximity

    @proximity.setter
    def proximity(self, proximity):
        """
        Sets the proximity of this TestQoS.
        A measure of service quality with respect to proximity to the goal.

        :param proximity: The proximity of this TestQoS.
        :type: object
        """
        if proximity is None:
            raise ValueError("Invalid value for `proximity`, must not be `None`")

        self._proximity = proximity

    @property
    def collisions(self):
        """
        Gets the collisions of this TestQoS.
        A measure of service quality with respect to the number of collisions.

        :return: The collisions of this TestQoS.
        :rtype: object
        """
        return self._collisions

    @collisions.setter
    def collisions(self, collisions):
        """
        Sets the collisions of this TestQoS.
        A measure of service quality with respect to the number of collisions.

        :param collisions: The collisions of this TestQoS.
        :type: object
        """
        if collisions is None:
            raise ValueError("Invalid value for `collisions`, must not be `None`")

        self._collisions = collisions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TestQoS):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
