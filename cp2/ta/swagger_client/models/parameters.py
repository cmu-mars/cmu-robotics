# coding: utf-8

"""
    cmu mars brass th: phase 2, cp2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Parameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'err_code': 'str',
        'err_description': 'str'
    }

    attribute_map = {
        'err_code': 'err-code',
        'err_description': 'err-description'
    }

    def __init__(self, err_code=None, err_description=None):
        """
        Parameters - a model defined in Swagger
        """

        self._err_code = None
        self._err_description = None

        self.err_code = err_code
        if err_description is not None:
          self.err_description = err_description

    @property
    def err_code(self):
        """
        Gets the err_code of this Parameters.
        Used to indicate the type of error that has occurred.

        :return: The err_code of this Parameters.
        :rtype: str
        """
        return self._err_code

    @err_code.setter
    def err_code(self, err_code):
        """
        Sets the err_code of this Parameters.
        Used to indicate the type of error that has occurred.

        :param err_code: The err_code of this Parameters.
        :type: str
        """
        if err_code is None:
            raise ValueError("Invalid value for `err_code`, must not be `None`")
        allowed_values = ["NeutralPerturbation", "PertubationFailedToCompile"]
        if err_code not in allowed_values:
            raise ValueError(
                "Invalid value for `err_code` ({0}), must be one of {1}"
                .format(err_code, allowed_values)
            )

        self._err_code = err_code

    @property
    def err_description(self):
        """
        Gets the err_description of this Parameters.
        An optional description of the error.

        :return: The err_description of this Parameters.
        :rtype: str
        """
        return self._err_description

    @err_description.setter
    def err_description(self, err_description):
        """
        Sets the err_description of this Parameters.
        An optional description of the error.

        :param err_description: The err_description of this Parameters.
        :type: str
        """

        self._err_description = err_description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Parameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
