# coding: utf-8

"""
    cmu mars brass th: phase 2, cp2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.candidate_adaptation import CandidateAdaptation  # noqa: F401,E501


class Parameters1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outcome': 'str',
        'running_time': 'float',
        'num_attempts': 'int',
        'pareto_set': 'list[CandidateAdaptation]',
        'log': 'list[CandidateAdaptation]'
    }

    attribute_map = {
        'outcome': 'outcome',
        'running_time': 'running-time',
        'num_attempts': 'num-attempts',
        'pareto_set': 'pareto-set',
        'log': 'log'
    }

    def __init__(self, outcome=None, running_time=None, num_attempts=None, pareto_set=None, log=None):  # noqa: E501
        """Parameters1 - a model defined in Swagger"""  # noqa: E501

        self._outcome = None
        self._running_time = None
        self._num_attempts = None
        self._pareto_set = None
        self._log = None
        self.discriminator = None

        self.outcome = outcome
        self.running_time = running_time
        self.num_attempts = num_attempts
        self.pareto_set = pareto_set
        self.log = log

    @property
    def outcome(self):
        """Gets the outcome of this Parameters1.  # noqa: E501

        A short description of the success of the repair process. A complete repair is one which passes all of the tests in the test suite. A partial repair is one that passes at least one previously failing test and does not introduce any new test failures. If the outcome of the test suite for the best patch found during the search does cause any previously failing tests to pass, then no repair has been found.  # noqa: E501

        :return: The outcome of this Parameters1.  # noqa: E501
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this Parameters1.

        A short description of the success of the repair process. A complete repair is one which passes all of the tests in the test suite. A partial repair is one that passes at least one previously failing test and does not introduce any new test failures. If the outcome of the test suite for the best patch found during the search does cause any previously failing tests to pass, then no repair has been found.  # noqa: E501

        :param outcome: The outcome of this Parameters1.  # noqa: E501
        :type: str
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")  # noqa: E501
        allowed_values = ["complete-repair", "partial-repair", "no-repair"]  # noqa: E501
        if outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome` ({0}), must be one of {1}"  # noqa: E501
                .format(outcome, allowed_values)
            )

        self._outcome = outcome

    @property
    def running_time(self):
        """Gets the running_time of this Parameters1.  # noqa: E501

        The number of minutes taken to complete the repair process.  # noqa: E501

        :return: The running_time of this Parameters1.  # noqa: E501
        :rtype: float
        """
        return self._running_time

    @running_time.setter
    def running_time(self, running_time):
        """Sets the running_time of this Parameters1.

        The number of minutes taken to complete the repair process.  # noqa: E501

        :param running_time: The running_time of this Parameters1.  # noqa: E501
        :type: float
        """
        if running_time is None:
            raise ValueError("Invalid value for `running_time`, must not be `None`")  # noqa: E501
        if running_time is not None and running_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `running_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._running_time = running_time

    @property
    def num_attempts(self):
        """Gets the num_attempts of this Parameters1.  # noqa: E501

        The number of code adaptations attempted.  # noqa: E501

        :return: The num_attempts of this Parameters1.  # noqa: E501
        :rtype: int
        """
        return self._num_attempts

    @num_attempts.setter
    def num_attempts(self, num_attempts):
        """Sets the num_attempts of this Parameters1.

        The number of code adaptations attempted.  # noqa: E501

        :param num_attempts: The num_attempts of this Parameters1.  # noqa: E501
        :type: int
        """
        if num_attempts is None:
            raise ValueError("Invalid value for `num_attempts`, must not be `None`")  # noqa: E501
        if num_attempts is not None and num_attempts < 0:  # noqa: E501
            raise ValueError("Invalid value for `num_attempts`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_attempts = num_attempts

    @property
    def pareto_set(self):
        """Gets the pareto_set of this Parameters1.  # noqa: E501

        A list containing details of all adaptations within the pareto set.  # noqa: E501

        :return: The pareto_set of this Parameters1.  # noqa: E501
        :rtype: list[CandidateAdaptation]
        """
        return self._pareto_set

    @pareto_set.setter
    def pareto_set(self, pareto_set):
        """Sets the pareto_set of this Parameters1.

        A list containing details of all adaptations within the pareto set.  # noqa: E501

        :param pareto_set: The pareto_set of this Parameters1.  # noqa: E501
        :type: list[CandidateAdaptation]
        """
        if pareto_set is None:
            raise ValueError("Invalid value for `pareto_set`, must not be `None`")  # noqa: E501

        self._pareto_set = pareto_set

    @property
    def log(self):
        """Gets the log of this Parameters1.  # noqa: E501

        A list containing details of each of the attempted repairs.  # noqa: E501

        :return: The log of this Parameters1.  # noqa: E501
        :rtype: list[CandidateAdaptation]
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this Parameters1.

        A list containing details of each of the attempted repairs.  # noqa: E501

        :param log: The log of this Parameters1.  # noqa: E501
        :type: list[CandidateAdaptation]
        """
        if log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")  # noqa: E501

        self._log = log

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Parameters1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
