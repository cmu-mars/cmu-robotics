# coding: utf-8

"""
    cmu mars brass th: phase 2, cp2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Parameters2(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outcome': 'str',
        'running_time': 'float',
        'num_attempts': 'int',
        'pareto_set': 'list[CandidateAdaptation]',
        'log': 'list[CandidateAdaptation]'
    }

    attribute_map = {
        'outcome': 'outcome',
        'running_time': 'running-time',
        'num_attempts': 'num-attempts',
        'pareto_set': 'pareto-set',
        'log': 'log'
    }

    def __init__(self, outcome=None, running_time=None, num_attempts=None, pareto_set=None, log=None):
        """
        Parameters2 - a model defined in Swagger
        """

        self._outcome = None
        self._running_time = None
        self._num_attempts = None
        self._pareto_set = None
        self._log = None

        self.outcome = outcome
        self.running_time = running_time
        self.num_attempts = num_attempts
        self.pareto_set = pareto_set
        self.log = log

    @property
    def outcome(self):
        """
        Gets the outcome of this Parameters2.
        A short description of the success of the repair process. A complete repair is one which fully restores the intent of the system (i.e., system degradation is reduced to zero). A partial repair reduces the degradation of the system from its initial value to a value greater than zero. If the level of degradation remains unchanged, no (partial) repair has been found.

        :return: The outcome of this Parameters2.
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """
        Sets the outcome of this Parameters2.
        A short description of the success of the repair process. A complete repair is one which fully restores the intent of the system (i.e., system degradation is reduced to zero). A partial repair reduces the degradation of the system from its initial value to a value greater than zero. If the level of degradation remains unchanged, no (partial) repair has been found.

        :param outcome: The outcome of this Parameters2.
        :type: str
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")
        allowed_values = ["CompleteRepair", "PartialRepair", "NoRepair"]
        if outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome` ({0}), must be one of {1}"
                .format(outcome, allowed_values)
            )

        self._outcome = outcome

    @property
    def running_time(self):
        """
        Gets the running_time of this Parameters2.
        The number of minutes taken to complete the repair process.

        :return: The running_time of this Parameters2.
        :rtype: float
        """
        return self._running_time

    @running_time.setter
    def running_time(self, running_time):
        """
        Sets the running_time of this Parameters2.
        The number of minutes taken to complete the repair process.

        :param running_time: The running_time of this Parameters2.
        :type: float
        """
        if running_time is None:
            raise ValueError("Invalid value for `running_time`, must not be `None`")
        if running_time is not None and running_time < 0:
            raise ValueError("Invalid value for `running_time`, must be a value greater than or equal to `0`")

        self._running_time = running_time

    @property
    def num_attempts(self):
        """
        Gets the num_attempts of this Parameters2.
        The number of code adaptations attempted.

        :return: The num_attempts of this Parameters2.
        :rtype: int
        """
        return self._num_attempts

    @num_attempts.setter
    def num_attempts(self, num_attempts):
        """
        Sets the num_attempts of this Parameters2.
        The number of code adaptations attempted.

        :param num_attempts: The num_attempts of this Parameters2.
        :type: int
        """
        if num_attempts is None:
            raise ValueError("Invalid value for `num_attempts`, must not be `None`")
        if num_attempts is not None and num_attempts < 0:
            raise ValueError("Invalid value for `num_attempts`, must be a value greater than or equal to `0`")

        self._num_attempts = num_attempts

    @property
    def pareto_set(self):
        """
        Gets the pareto_set of this Parameters2.
        A list containing details of all adaptations within the pareto set.

        :return: The pareto_set of this Parameters2.
        :rtype: list[CandidateAdaptation]
        """
        return self._pareto_set

    @pareto_set.setter
    def pareto_set(self, pareto_set):
        """
        Sets the pareto_set of this Parameters2.
        A list containing details of all adaptations within the pareto set.

        :param pareto_set: The pareto_set of this Parameters2.
        :type: list[CandidateAdaptation]
        """
        if pareto_set is None:
            raise ValueError("Invalid value for `pareto_set`, must not be `None`")

        self._pareto_set = pareto_set

    @property
    def log(self):
        """
        Gets the log of this Parameters2.
        A list containing details of each of the attempted repairs.

        :return: The log of this Parameters2.
        :rtype: list[CandidateAdaptation]
        """
        return self._log

    @log.setter
    def log(self, log):
        """
        Sets the log of this Parameters2.
        A list containing details of each of the attempted repairs.

        :param log: The log of this Parameters2.
        :type: list[CandidateAdaptation]
        """
        if log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")

        self._log = log

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Parameters2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
