# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class CompilationOutcome(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, time_taken: float=None, successful: bool=None):
        """
        CompilationOutcome - a model defined in Swagger

        :param time_taken: The time_taken of this CompilationOutcome.
        :type time_taken: float
        :param successful: The successful of this CompilationOutcome.
        :type successful: bool
        """
        self.swagger_types = {
            'time_taken': float,
            'successful': bool
        }

        self.attribute_map = {
            'time_taken': 'time-taken',
            'successful': 'successful'
        }

        self._time_taken = time_taken
        self._successful = successful

    @classmethod
    def from_dict(cls, dikt) -> 'CompilationOutcome':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CompilationOutcome of this CompilationOutcome.
        :rtype: CompilationOutcome
        """
        return deserialize_model(dikt, cls)

    @property
    def time_taken(self) -> float:
        """
        Gets the time_taken of this CompilationOutcome.
        The number of seconds taken to compile this adaptation.

        :return: The time_taken of this CompilationOutcome.
        :rtype: float
        """
        return self._time_taken

    @time_taken.setter
    def time_taken(self, time_taken: float):
        """
        Sets the time_taken of this CompilationOutcome.
        The number of seconds taken to compile this adaptation.

        :param time_taken: The time_taken of this CompilationOutcome.
        :type time_taken: float
        """
        if time_taken is None:
            raise ValueError("Invalid value for `time_taken`, must not be `None`")

        self._time_taken = time_taken

    @property
    def successful(self) -> bool:
        """
        Gets the successful of this CompilationOutcome.
        A flag indicating whether the compilation of this adaptation was successful or not.

        :return: The successful of this CompilationOutcome.
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful: bool):
        """
        Sets the successful of this CompilationOutcome.
        A flag indicating whether the compilation of this adaptation was successful or not.

        :param successful: The successful of this CompilationOutcome.
        :type successful: bool
        """
        if successful is None:
            raise ValueError("Invalid value for `successful`, must not be `None`")

        self._successful = successful

