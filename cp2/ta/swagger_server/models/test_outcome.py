# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TestOutcome(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, test_id: str=None, time_taken: float=None, passed: bool=None):  # noqa: E501
        """TestOutcome - a model defined in Swagger

        :param test_id: The test_id of this TestOutcome.  # noqa: E501
        :type test_id: str
        :param time_taken: The time_taken of this TestOutcome.  # noqa: E501
        :type time_taken: float
        :param passed: The passed of this TestOutcome.  # noqa: E501
        :type passed: bool
        """
        self.swagger_types = {
            'test_id': str,
            'time_taken': float,
            'passed': bool
        }

        self.attribute_map = {
            'test_id': 'test-id',
            'time_taken': 'time-taken',
            'passed': 'passed'
        }

        self._test_id = test_id
        self._time_taken = time_taken
        self._passed = passed

    @classmethod
    def from_dict(cls, dikt) -> 'TestOutcome':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TestOutcome of this TestOutcome.  # noqa: E501
        :rtype: TestOutcome
        """
        return util.deserialize_model(dikt, cls)

    @property
    def test_id(self) -> str:
        """Gets the test_id of this TestOutcome.

        A unique identifier for the test to which this outcome belongs.  # noqa: E501

        :return: The test_id of this TestOutcome.
        :rtype: str
        """
        return self._test_id

    @test_id.setter
    def test_id(self, test_id: str):
        """Sets the test_id of this TestOutcome.

        A unique identifier for the test to which this outcome belongs.  # noqa: E501

        :param test_id: The test_id of this TestOutcome.
        :type test_id: str
        """
        if test_id is None:
            raise ValueError("Invalid value for `test_id`, must not be `None`")  # noqa: E501

        self._test_id = test_id

    @property
    def time_taken(self) -> float:
        """Gets the time_taken of this TestOutcome.

        The number of seconds taken to complete the test.  # noqa: E501

        :return: The time_taken of this TestOutcome.
        :rtype: float
        """
        return self._time_taken

    @time_taken.setter
    def time_taken(self, time_taken: float):
        """Sets the time_taken of this TestOutcome.

        The number of seconds taken to complete the test.  # noqa: E501

        :param time_taken: The time_taken of this TestOutcome.
        :type time_taken: float
        """
        if time_taken is None:
            raise ValueError("Invalid value for `time_taken`, must not be `None`")  # noqa: E501
        if time_taken is not None and time_taken < 0:  # noqa: E501
            raise ValueError("Invalid value for `time_taken`, must be a value greater than or equal to `0`")  # noqa: E501

        self._time_taken = time_taken

    @property
    def passed(self) -> bool:
        """Gets the passed of this TestOutcome.

        Indicates whether or not the test passed.  # noqa: E501

        :return: The passed of this TestOutcome.
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed: bool):
        """Sets the passed of this TestOutcome.

        Indicates whether or not the test passed.  # noqa: E501

        :param passed: The passed of this TestOutcome.
        :type passed: bool
        """
        if passed is None:
            raise ValueError("Invalid value for `passed`, must not be `None`")  # noqa: E501

        self._passed = passed
