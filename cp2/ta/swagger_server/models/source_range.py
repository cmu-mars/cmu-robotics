# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.source_location import SourceLocation  # noqa: F401,E501
from swagger_server import util


class SourceRange(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, start: SourceLocation=None, stop: SourceLocation=None):  # noqa: E501
        """SourceRange - a model defined in Swagger

        :param start: The start of this SourceRange.  # noqa: E501
        :type start: SourceLocation
        :param stop: The stop of this SourceRange.  # noqa: E501
        :type stop: SourceLocation
        """
        self.swagger_types = {
            'start': SourceLocation,
            'stop': SourceLocation
        }

        self.attribute_map = {
            'start': 'start',
            'stop': 'stop'
        }

        self._start = start
        self._stop = stop

    @classmethod
    def from_dict(cls, dikt) -> 'SourceRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SourceRange of this SourceRange.  # noqa: E501
        :rtype: SourceRange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start(self) -> SourceLocation:
        """Gets the start of this SourceRange.

        The location that marks the start of this source range.  # noqa: E501

        :return: The start of this SourceRange.
        :rtype: SourceLocation
        """
        return self._start

    @start.setter
    def start(self, start: SourceLocation):
        """Sets the start of this SourceRange.

        The location that marks the start of this source range.  # noqa: E501

        :param start: The start of this SourceRange.
        :type start: SourceLocation
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def stop(self) -> SourceLocation:
        """Gets the stop of this SourceRange.

        The location that marks the end of this source range.  # noqa: E501

        :return: The stop of this SourceRange.
        :rtype: SourceLocation
        """
        return self._stop

    @stop.setter
    def stop(self, stop: SourceLocation):
        """Sets the stop of this SourceRange.

        The location that marks the end of this source range.  # noqa: E501

        :param stop: The stop of this SourceRange.
        :type stop: SourceLocation
        """
        if stop is None:
            raise ValueError("Invalid value for `stop`, must not be `None`")  # noqa: E501

        self._stop = stop
