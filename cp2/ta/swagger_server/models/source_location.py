# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SourceLocation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, file: str=None, line: int=None, column: int=None):  # noqa: E501
        """SourceLocation - a model defined in Swagger

        :param file: The file of this SourceLocation.  # noqa: E501
        :type file: str
        :param line: The line of this SourceLocation.  # noqa: E501
        :type line: int
        :param column: The column of this SourceLocation.  # noqa: E501
        :type column: int
        """
        self.swagger_types = {
            'file': str,
            'line': int,
            'column': int
        }

        self.attribute_map = {
            'file': 'file',
            'line': 'line',
            'column': 'column'
        }

        self._file = file
        self._line = line
        self._column = column

    @classmethod
    def from_dict(cls, dikt) -> 'SourceLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SourceLocation of this SourceLocation.  # noqa: E501
        :rtype: SourceLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self) -> str:
        """Gets the file of this SourceLocation.

        The file at which this source location resides.  # noqa: E501

        :return: The file of this SourceLocation.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file: str):
        """Sets the file of this SourceLocation.

        The file at which this source location resides.  # noqa: E501

        :param file: The file of this SourceLocation.
        :type file: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def line(self) -> int:
        """Gets the line of this SourceLocation.

        The one-indexed line number of this location.  # noqa: E501

        :return: The line of this SourceLocation.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line: int):
        """Sets the line of this SourceLocation.

        The one-indexed line number of this location.  # noqa: E501

        :param line: The line of this SourceLocation.
        :type line: int
        """
        if line is None:
            raise ValueError("Invalid value for `line`, must not be `None`")  # noqa: E501
        if line is not None and line < 1:  # noqa: E501
            raise ValueError("Invalid value for `line`, must be a value greater than or equal to `1`")  # noqa: E501

        self._line = line

    @property
    def column(self) -> int:
        """Gets the column of this SourceLocation.

        The one-indexed column number of this location.  # noqa: E501

        :return: The column of this SourceLocation.
        :rtype: int
        """
        return self._column

    @column.setter
    def column(self, column: int):
        """Sets the column of this SourceLocation.

        The one-indexed column number of this location.  # noqa: E501

        :param column: The column of this SourceLocation.
        :type column: int
        """
        if column is None:
            raise ValueError("Invalid value for `column`, must not be `None`")  # noqa: E501
        if column is not None and column < 1:  # noqa: E501
            raise ValueError("Invalid value for `column`, must be a value greater than or equal to `1`")  # noqa: E501

        self._column = column
