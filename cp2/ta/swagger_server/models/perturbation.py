# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.perturbation_kind import PerturbationKind  # noqa: F401,E501
from swagger_server.models.source_range import SourceRange  # noqa: F401,E501
from swagger_server import util


class Perturbation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, kind: PerturbationKind=None, at: SourceRange=None, replacement: str=None):  # noqa: E501
        """Perturbation - a model defined in Swagger

        :param kind: The kind of this Perturbation.  # noqa: E501
        :type kind: PerturbationKind
        :param at: The at of this Perturbation.  # noqa: E501
        :type at: SourceRange
        :param replacement: The replacement of this Perturbation.  # noqa: E501
        :type replacement: str
        """
        self.swagger_types = {
            'kind': PerturbationKind,
            'at': SourceRange,
            'replacement': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'at': 'at',
            'replacement': 'replacement'
        }

        self._kind = kind
        self._at = at
        self._replacement = replacement

    @classmethod
    def from_dict(cls, dikt) -> 'Perturbation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Perturbation of this Perturbation.  # noqa: E501
        :rtype: Perturbation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self) -> PerturbationKind:
        """Gets the kind of this Perturbation.


        :return: The kind of this Perturbation.
        :rtype: PerturbationKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind: PerturbationKind):
        """Sets the kind of this Perturbation.


        :param kind: The kind of this Perturbation.
        :type kind: PerturbationKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def at(self) -> SourceRange:
        """Gets the at of this Perturbation.

        The range of code that is deleted or replaced by the perturbation.  # noqa: E501

        :return: The at of this Perturbation.
        :rtype: SourceRange
        """
        return self._at

    @at.setter
    def at(self, at: SourceRange):
        """Sets the at of this Perturbation.

        The range of code that is deleted or replaced by the perturbation.  # noqa: E501

        :param at: The at of this Perturbation.
        :type at: SourceRange
        """
        if at is None:
            raise ValueError("Invalid value for `at`, must not be `None`")  # noqa: E501

        self._at = at

    @property
    def replacement(self) -> str:
        """Gets the replacement of this Perturbation.

        The body of the source code that should replaced the source code given by the location range associated with this perturbation.  # noqa: E501

        :return: The replacement of this Perturbation.
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement: str):
        """Sets the replacement of this Perturbation.

        The body of the source code that should replaced the source code given by the location range associated with this perturbation.  # noqa: E501

        :param replacement: The replacement of this Perturbation.
        :type replacement: str
        """

        self._replacement = replacement
