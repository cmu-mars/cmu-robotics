# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.compilation_outcome import CompilationOutcome
from swagger_server.models.degradation import Degradation
from swagger_server.models.test_outcome import TestOutcome
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class CandidateAdaptation(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, diff: str=None, compilation_outcome: CompilationOutcome=None, degradation: Degradation=None, test_outcomes: List[TestOutcome]=None):
        """
        CandidateAdaptation - a model defined in Swagger

        :param diff: The diff of this CandidateAdaptation.
        :type diff: str
        :param compilation_outcome: The compilation_outcome of this CandidateAdaptation.
        :type compilation_outcome: CompilationOutcome
        :param degradation: The degradation of this CandidateAdaptation.
        :type degradation: Degradation
        :param test_outcomes: The test_outcomes of this CandidateAdaptation.
        :type test_outcomes: List[TestOutcome]
        """
        self.swagger_types = {
            'diff': str,
            'compilation_outcome': CompilationOutcome,
            'degradation': Degradation,
            'test_outcomes': List[TestOutcome]
        }

        self.attribute_map = {
            'diff': 'diff',
            'compilation_outcome': 'compilation-outcome',
            'degradation': 'degradation',
            'test_outcomes': 'test-outcomes'
        }

        self._diff = diff
        self._compilation_outcome = compilation_outcome
        self._degradation = degradation
        self._test_outcomes = test_outcomes

    @classmethod
    def from_dict(cls, dikt) -> 'CandidateAdaptation':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CandidateAdaptation of this CandidateAdaptation.
        :rtype: CandidateAdaptation
        """
        return deserialize_model(dikt, cls)

    @property
    def diff(self) -> str:
        """
        Gets the diff of this CandidateAdaptation.
        A description of the change to the code, given in the form of a diff.

        :return: The diff of this CandidateAdaptation.
        :rtype: str
        """
        return self._diff

    @diff.setter
    def diff(self, diff: str):
        """
        Sets the diff of this CandidateAdaptation.
        A description of the change to the code, given in the form of a diff.

        :param diff: The diff of this CandidateAdaptation.
        :type diff: str
        """
        if diff is None:
            raise ValueError("Invalid value for `diff`, must not be `None`")

        self._diff = diff

    @property
    def compilation_outcome(self) -> CompilationOutcome:
        """
        Gets the compilation_outcome of this CandidateAdaptation.
        A description of the outcome of attempting to compile this adaptation.

        :return: The compilation_outcome of this CandidateAdaptation.
        :rtype: CompilationOutcome
        """
        return self._compilation_outcome

    @compilation_outcome.setter
    def compilation_outcome(self, compilation_outcome: CompilationOutcome):
        """
        Sets the compilation_outcome of this CandidateAdaptation.
        A description of the outcome of attempting to compile this adaptation.

        :param compilation_outcome: The compilation_outcome of this CandidateAdaptation.
        :type compilation_outcome: CompilationOutcome
        """
        if compilation_outcome is None:
            raise ValueError("Invalid value for `compilation_outcome`, must not be `None`")

        self._compilation_outcome = compilation_outcome

    @property
    def degradation(self) -> Degradation:
        """
        Gets the degradation of this CandidateAdaptation.
        A description of the level of degradation that was observed when this adaptation was applied.

        :return: The degradation of this CandidateAdaptation.
        :rtype: Degradation
        """
        return self._degradation

    @degradation.setter
    def degradation(self, degradation: Degradation):
        """
        Sets the degradation of this CandidateAdaptation.
        A description of the level of degradation that was observed when this adaptation was applied.

        :param degradation: The degradation of this CandidateAdaptation.
        :type degradation: Degradation
        """
        if degradation is None:
            raise ValueError("Invalid value for `degradation`, must not be `None`")

        self._degradation = degradation

    @property
    def test_outcomes(self) -> List[TestOutcome]:
        """
        Gets the test_outcomes of this CandidateAdaptation.
        A summary of the outcomes for each of the test cases that this adaptation was evaluated against.

        :return: The test_outcomes of this CandidateAdaptation.
        :rtype: List[TestOutcome]
        """
        return self._test_outcomes

    @test_outcomes.setter
    def test_outcomes(self, test_outcomes: List[TestOutcome]):
        """
        Sets the test_outcomes of this CandidateAdaptation.
        A summary of the outcomes for each of the test cases that this adaptation was evaluated against.

        :param test_outcomes: The test_outcomes of this CandidateAdaptation.
        :type test_outcomes: List[TestOutcome]
        """
        if test_outcomes is None:
            raise ValueError("Invalid value for `test_outcomes`, must not be `None`")

        self._test_outcomes = test_outcomes

