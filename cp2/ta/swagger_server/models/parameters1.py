# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Parameters1(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, time_limit: float=None, attempt_limit: int=None):
        """
        Parameters1 - a model defined in Swagger

        :param time_limit: The time_limit of this Parameters1.
        :type time_limit: float
        :param attempt_limit: The attempt_limit of this Parameters1.
        :type attempt_limit: int
        """
        self.swagger_types = {
            'time_limit': float,
            'attempt_limit': int
        }

        self.attribute_map = {
            'time_limit': 'time-limit',
            'attempt_limit': 'attempt-limit'
        }

        self._time_limit = time_limit
        self._attempt_limit = attempt_limit

    @classmethod
    def from_dict(cls, dikt) -> 'Parameters1':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parameters_1 of this Parameters1.
        :rtype: Parameters1
        """
        return deserialize_model(dikt, cls)

    @property
    def time_limit(self) -> float:
        """
        Gets the time_limit of this Parameters1.
        An (optional) time limit for the adaptation process, specified in minutes.

        :return: The time_limit of this Parameters1.
        :rtype: float
        """
        return self._time_limit

    @time_limit.setter
    def time_limit(self, time_limit: float):
        """
        Sets the time_limit of this Parameters1.
        An (optional) time limit for the adaptation process, specified in minutes.

        :param time_limit: The time_limit of this Parameters1.
        :type time_limit: float
        """
        if time_limit is not None and time_limit < 1.0:
            raise ValueError("Invalid value for `time_limit`, must be a value greater than or equal to `1.0`")

        self._time_limit = time_limit

    @property
    def attempt_limit(self) -> int:
        """
        Gets the attempt_limit of this Parameters1.
        An (optional) limit on the number of adaptations that may be attempted.

        :return: The attempt_limit of this Parameters1.
        :rtype: int
        """
        return self._attempt_limit

    @attempt_limit.setter
    def attempt_limit(self, attempt_limit: int):
        """
        Sets the attempt_limit of this Parameters1.
        An (optional) limit on the number of adaptations that may be attempted.

        :param attempt_limit: The attempt_limit of this Parameters1.
        :type attempt_limit: int
        """
        if attempt_limit is not None and attempt_limit < 1:
            raise ValueError("Invalid value for `attempt_limit`, must be a value greater than or equal to `1`")

        self._attempt_limit = attempt_limit

