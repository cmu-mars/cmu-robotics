# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.perturbation import Perturbation
from swagger_server.models.source_range import SourceRange
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class InsertStatementPerturbation(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, kind: str=None, location: SourceRange=None, statement: str=None):
        """
        InsertStatementPerturbation - a model defined in Swagger

        :param kind: The kind of this InsertStatementPerturbation.
        :type kind: str
        :param location: The location of this InsertStatementPerturbation.
        :type location: SourceRange
        :param statement: The statement of this InsertStatementPerturbation.
        :type statement: str
        """
        self.swagger_types = {
            'kind': str,
            'location': SourceRange,
            'statement': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'location': 'location',
            'statement': 'statement'
        }

        self._kind = kind
        self._location = location
        self._statement = statement

    @classmethod
    def from_dict(cls, dikt) -> 'InsertStatementPerturbation':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InsertStatementPerturbation of this InsertStatementPerturbation.
        :rtype: InsertStatementPerturbation
        """
        return deserialize_model(dikt, cls)

    @property
    def kind(self) -> str:
        """
        Gets the kind of this InsertStatementPerturbation.
        Used to discriminate between different kinds of perturbation.

        :return: The kind of this InsertStatementPerturbation.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """
        Sets the kind of this InsertStatementPerturbation.
        Used to discriminate between different kinds of perturbation.

        :param kind: The kind of this InsertStatementPerturbation.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def location(self) -> SourceRange:
        """
        Gets the location of this InsertStatementPerturbation.
        The location immediately before the location at which the statement will be inserted.

        :return: The location of this InsertStatementPerturbation.
        :rtype: SourceRange
        """
        return self._location

    @location.setter
    def location(self, location: SourceRange):
        """
        Sets the location of this InsertStatementPerturbation.
        The location immediately before the location at which the statement will be inserted.

        :param location: The location of this InsertStatementPerturbation.
        :type location: SourceRange
        """

        self._location = location

    @property
    def statement(self) -> str:
        """
        Gets the statement of this InsertStatementPerturbation.
        The source code for the inserted statement.

        :return: The statement of this InsertStatementPerturbation.
        :rtype: str
        """
        return self._statement

    @statement.setter
    def statement(self, statement: str):
        """
        Sets the statement of this InsertStatementPerturbation.
        The source code for the inserted statement.

        :param statement: The statement of this InsertStatementPerturbation.
        :type statement: str
        """

        self._statement = statement

