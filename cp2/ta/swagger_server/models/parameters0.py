# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Parameters0(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, file: str=None, shape: str=None, line: int=None):
        """
        Parameters - a model defined in Swagger

        :param file: The file of this Parameters.
        :type file: str
        :param shape: The shape of this Parameters.
        :type shape: str
        :param line: The line of this Parameters.
        :type line: int
        """
        self.swagger_types = {
            'file': str,
            'shape': str,
            'line': int
        }

        self.attribute_map = {
            'file': 'file',
            'shape': 'shape',
            'line': 'line'
        }

        self._file = file
        self._shape = shape
        self._line = line

    @classmethod
    def from_dict(cls, dikt) -> 'Parameters':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parameters of this Parameters.
        :rtype: Parameters
        """
        return deserialize_model(dikt, cls)

    @property
    def file(self) -> str:
        """
        Gets the file of this Parameters.
        The file at which the perturbation should be injected.

        :return: The file of this Parameters.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file: str):
        """
        Sets the file of this Parameters.
        The file at which the perturbation should be injected.

        :param file: The file of this Parameters.
        :type file: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")

        self._file = file

    @property
    def shape(self) -> str:
        """
        Gets the shape of this Parameters.
        The shape of the fault (e.g., incorrect conditional, missing control flow).

        :return: The shape of this Parameters.
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape: str):
        """
        Sets the shape of this Parameters.
        The shape of the fault (e.g., incorrect conditional, missing control flow).

        :param shape: The shape of this Parameters.
        :type shape: str
        """
        allowed_values = ["DeleteStatement", "ReplaceStatement", "InsertStatement"]
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def line(self) -> int:
        """
        Gets the line of this Parameters.
        The number of the line at which the perturbation should be injected.

        :return: The line of this Parameters.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line: int):
        """
        Sets the line of this Parameters.
        The number of the line at which the perturbation should be injected.

        :param line: The line of this Parameters.
        :type line: int
        """

        self._line = line
