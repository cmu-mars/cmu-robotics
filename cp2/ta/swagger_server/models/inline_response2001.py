# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.adaptation import Adaptation
from swagger_server.models.inline_response2001_resourceconsumption import InlineResponse2001Resourceconsumption
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class InlineResponse2001(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, stage: str=None, resource_consumption: InlineResponse2001Resourceconsumption=None, pareto_set: List[Adaptation]=None):
        """
        InlineResponse2001 - a model defined in Swagger

        :param stage: The stage of this InlineResponse2001.
        :type stage: str
        :param resource_consumption: The resource_consumption of this InlineResponse2001.
        :type resource_consumption: InlineResponse2001Resourceconsumption
        :param pareto_set: The pareto_set of this InlineResponse2001.
        :type pareto_set: List[Adaptation]
        """
        self.swagger_types = {
            'stage': str,
            'resource_consumption': InlineResponse2001Resourceconsumption,
            'pareto_set': List[Adaptation]
        }

        self.attribute_map = {
            'stage': 'stage',
            'resource_consumption': 'resource-consumption',
            'pareto_set': 'pareto-set'
        }

        self._stage = stage
        self._resource_consumption = resource_consumption
        self._pareto_set = pareto_set

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2001':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_1 of this InlineResponse2001.
        :rtype: InlineResponse2001
        """
        return deserialize_model(dikt, cls)

    @property
    def stage(self) -> str:
        """
        Gets the stage of this InlineResponse2001.
        A concise description of the current state of the system.

        :return: The stage of this InlineResponse2001.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage: str):
        """
        Sets the stage of this InlineResponse2001.
        A concise description of the current state of the system.

        :param stage: The stage of this InlineResponse2001.
        :type stage: str
        """
        allowed_values = ["awaiting-perturbation", "injecting-perturbation", "localising-perturbation", "searching-for-adaptation", "finished-adapting"]
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def resource_consumption(self) -> InlineResponse2001Resourceconsumption:
        """
        Gets the resource_consumption of this InlineResponse2001.

        :return: The resource_consumption of this InlineResponse2001.
        :rtype: InlineResponse2001Resourceconsumption
        """
        return self._resource_consumption

    @resource_consumption.setter
    def resource_consumption(self, resource_consumption: InlineResponse2001Resourceconsumption):
        """
        Sets the resource_consumption of this InlineResponse2001.

        :param resource_consumption: The resource_consumption of this InlineResponse2001.
        :type resource_consumption: InlineResponse2001Resourceconsumption
        """

        self._resource_consumption = resource_consumption

    @property
    def pareto_set(self) -> List[Adaptation]:
        """
        Gets the pareto_set of this InlineResponse2001.
        A list containing details of the sub-set of adaptations that have been encountered that belong to the pareto set (i.e., the set of non-dominated adaptations).

        :return: The pareto_set of this InlineResponse2001.
        :rtype: List[Adaptation]
        """
        return self._pareto_set

    @pareto_set.setter
    def pareto_set(self, pareto_set: List[Adaptation]):
        """
        Sets the pareto_set of this InlineResponse2001.
        A list containing details of the sub-set of adaptations that have been encountered that belong to the pareto set (i.e., the set of non-dominated adaptations).

        :param pareto_set: The pareto_set of this InlineResponse2001.
        :type pareto_set: List[Adaptation]
        """

        self._pareto_set = pareto_set

