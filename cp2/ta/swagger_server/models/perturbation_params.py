# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.perturbation_kind import PerturbationKind  # noqa: F401,E501
from swagger_server import util


class PerturbationParams(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, file: str=None, shape: PerturbationKind=None, line: int=None):  # noqa: E501
        """PerturbationParams - a model defined in Swagger

        :param file: The file of this PerturbationParams.  # noqa: E501
        :type file: str
        :param shape: The shape of this PerturbationParams.  # noqa: E501
        :type shape: PerturbationKind
        :param line: The line of this PerturbationParams.  # noqa: E501
        :type line: int
        """
        self.swagger_types = {
            'file': str,
            'shape': PerturbationKind,
            'line': int
        }

        self.attribute_map = {
            'file': 'file',
            'shape': 'shape',
            'line': 'line'
        }

        self._file = file
        self._shape = shape
        self._line = line

    @classmethod
    def from_dict(cls, dikt) -> 'PerturbationParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The perturbation_params of this PerturbationParams.  # noqa: E501
        :rtype: PerturbationParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self) -> str:
        """Gets the file of this PerturbationParams.

        The file at which the perturbation should be injected.  # noqa: E501

        :return: The file of this PerturbationParams.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file: str):
        """Sets the file of this PerturbationParams.

        The file at which the perturbation should be injected.  # noqa: E501

        :param file: The file of this PerturbationParams.
        :type file: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def shape(self) -> PerturbationKind:
        """Gets the shape of this PerturbationParams.


        :return: The shape of this PerturbationParams.
        :rtype: PerturbationKind
        """
        return self._shape

    @shape.setter
    def shape(self, shape: PerturbationKind):
        """Sets the shape of this PerturbationParams.


        :param shape: The shape of this PerturbationParams.
        :type shape: PerturbationKind
        """
        if shape is None:
            raise ValueError("Invalid value for `shape`, must not be `None`")  # noqa: E501

        self._shape = shape

    @property
    def line(self) -> int:
        """Gets the line of this PerturbationParams.

        The number of the line at which the perturbation should be injected.  # noqa: E501

        :return: The line of this PerturbationParams.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line: int):
        """Sets the line of this PerturbationParams.

        The number of the line at which the perturbation should be injected.  # noqa: E501

        :param line: The line of this PerturbationParams.
        :type line: int
        """

        self._line = line
