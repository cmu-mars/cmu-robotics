# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse2001Resourceconsumption(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, num_attempts: int=None, time_spent: float=None):  # noqa: E501
        """InlineResponse2001Resourceconsumption - a model defined in Swagger

        :param num_attempts: The num_attempts of this InlineResponse2001Resourceconsumption.  # noqa: E501
        :type num_attempts: int
        :param time_spent: The time_spent of this InlineResponse2001Resourceconsumption.  # noqa: E501
        :type time_spent: float
        """
        self.swagger_types = {
            'num_attempts': int,
            'time_spent': float
        }

        self.attribute_map = {
            'num_attempts': 'num-attempts',
            'time_spent': 'time-spent'
        }

        self._num_attempts = num_attempts
        self._time_spent = time_spent

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2001Resourceconsumption':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_1_resourceconsumption of this InlineResponse2001Resourceconsumption.  # noqa: E501
        :rtype: InlineResponse2001Resourceconsumption
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_attempts(self) -> int:
        """Gets the num_attempts of this InlineResponse2001Resourceconsumption.

        Number of attempted adaptations.  # noqa: E501

        :return: The num_attempts of this InlineResponse2001Resourceconsumption.
        :rtype: int
        """
        return self._num_attempts

    @num_attempts.setter
    def num_attempts(self, num_attempts: int):
        """Sets the num_attempts of this InlineResponse2001Resourceconsumption.

        Number of attempted adaptations.  # noqa: E501

        :param num_attempts: The num_attempts of this InlineResponse2001Resourceconsumption.
        :type num_attempts: int
        """
        if num_attempts is None:
            raise ValueError("Invalid value for `num_attempts`, must not be `None`")  # noqa: E501
        if num_attempts is not None and num_attempts < 0:  # noqa: E501
            raise ValueError("Invalid value for `num_attempts`, must be a value greater than or equal to `0`")  # noqa: E501

        self._num_attempts = num_attempts

    @property
    def time_spent(self) -> float:
        """Gets the time_spent of this InlineResponse2001Resourceconsumption.

        Wall-clock time spent searching for an adaptation.  # noqa: E501

        :return: The time_spent of this InlineResponse2001Resourceconsumption.
        :rtype: float
        """
        return self._time_spent

    @time_spent.setter
    def time_spent(self, time_spent: float):
        """Sets the time_spent of this InlineResponse2001Resourceconsumption.

        Wall-clock time spent searching for an adaptation.  # noqa: E501

        :param time_spent: The time_spent of this InlineResponse2001Resourceconsumption.
        :type time_spent: float
        """
        if time_spent is not None and time_spent < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `time_spent`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._time_spent = time_spent
