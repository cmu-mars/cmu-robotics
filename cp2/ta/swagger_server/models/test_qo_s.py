# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class TestQoS(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, duration: object=None, proximity: object=None, collisions: object=None):
        """
        TestQoS - a model defined in Swagger

        :param duration: The duration of this TestQoS.
        :type duration: object
        :param proximity: The proximity of this TestQoS.
        :type proximity: object
        :param collisions: The collisions of this TestQoS.
        :type collisions: object
        """
        self.swagger_types = {
            'duration': object,
            'proximity': object,
            'collisions': object
        }

        self.attribute_map = {
            'duration': 'duration',
            'proximity': 'proximity',
            'collisions': 'collisions'
        }

        self._duration = duration
        self._proximity = proximity
        self._collisions = collisions

    @classmethod
    def from_dict(cls, dikt) -> 'TestQoS':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TestQoS of this TestQoS.
        :rtype: TestQoS
        """
        return deserialize_model(dikt, cls)

    @property
    def duration(self) -> object:
        """
        Gets the duration of this TestQoS.
        A measure of service quality with respect to time taken to complete the test.

        :return: The duration of this TestQoS.
        :rtype: object
        """
        return self._duration

    @duration.setter
    def duration(self, duration: object):
        """
        Sets the duration of this TestQoS.
        A measure of service quality with respect to time taken to complete the test.

        :param duration: The duration of this TestQoS.
        :type duration: object
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def proximity(self) -> object:
        """
        Gets the proximity of this TestQoS.
        A measure of service quality with respect to proximity to the goal.

        :return: The proximity of this TestQoS.
        :rtype: object
        """
        return self._proximity

    @proximity.setter
    def proximity(self, proximity: object):
        """
        Sets the proximity of this TestQoS.
        A measure of service quality with respect to proximity to the goal.

        :param proximity: The proximity of this TestQoS.
        :type proximity: object
        """
        if proximity is None:
            raise ValueError("Invalid value for `proximity`, must not be `None`")

        self._proximity = proximity

    @property
    def collisions(self) -> object:
        """
        Gets the collisions of this TestQoS.
        A measure of service quality with respect to the number of collisions.

        :return: The collisions of this TestQoS.
        :rtype: object
        """
        return self._collisions

    @collisions.setter
    def collisions(self, collisions: object):
        """
        Sets the collisions of this TestQoS.
        A measure of service quality with respect to the number of collisions.

        :param collisions: The collisions of this TestQoS.
        :type collisions: object
        """
        if collisions is None:
            raise ValueError("Invalid value for `collisions`, must not be `None`")

        self._collisions = collisions

