# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ErrorError(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, message: str=None):  # noqa: E501
        """ErrorError - a model defined in Swagger

        :param kind: The kind of this ErrorError.  # noqa: E501
        :type kind: str
        :param message: The message of this ErrorError.  # noqa: E501
        :type message: str
        """
        self.swagger_types = {
            'kind': str,
            'message': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'message': 'message'
        }

        self._kind = kind
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error_error of this ErrorError.  # noqa: E501
        :rtype: ErrorError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self) -> str:
        """Gets the kind of this ErrorError.

        The kind of error that occurred.  # noqa: E501

        :return: The kind of this ErrorError.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this ErrorError.

        The kind of error that occurred.  # noqa: E501

        :param kind: The kind of this ErrorError.
        :type kind: str
        """
        allowed_values = ["NeutralPerturbation", "FailedToComputeCoverage", "NotReadyToPerturb", "NotReadyToAdapt", "FileNotFound", "LineNotFound", "OperatorNotFound", "NoSearchLimits"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def message(self) -> str:
        """Gets the message of this ErrorError.

        Human-readable information about the error, if any can be provided.  # noqa: E501

        :return: The message of this ErrorError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this ErrorError.

        Human-readable information about the error, if any can be provided.  # noqa: E501

        :param message: The message of this ErrorError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
