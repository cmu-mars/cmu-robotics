# coding: utf-8

"""
    cmu mars brass th: phase 2, cp3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Parameters1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'message': 'str',
        'sim_time': 'int',
        'plan': 'list[str]',
        'config': 'list[str]',
        'sensors': 'list[str]'
    }

    attribute_map = {
        'status': 'status',
        'message': 'message',
        'sim_time': 'sim-time',
        'plan': 'plan',
        'config': 'config',
        'sensors': 'sensors'
    }

    def __init__(self, status=None, message=None, sim_time=None, plan=None, config=None, sensors=None):
        """
        Parameters1 - a model defined in Swagger
        """

        self._status = None
        self._message = None
        self._sim_time = None
        self._plan = None
        self._config = None
        self._sensors = None

        self.status = status
        if message is not None:
          self.message = message
        self.sim_time = sim_time
        if plan is not None:
          self.plan = plan
        if config is not None:
          self.config = config
        if sensors is not None:
          self.sensors = sensors

    @property
    def status(self):
        """
        Gets the status of this Parameters1.
        one of a enumerated set of statuses to report, arise, as follows:   * `live`, the SUT has processed the configuration data      and is ready for initial perturbations (if any) and the      start of the test    * `mission-running`, the SUT has processed the initial      perturbations after receiving `/start`, possibly      adapted, and the robot is now actually moving along      its path. it is an error to send any perturbation to      the SUT between sending a message to `/start` and      receiving this status.    * `adapting`, the SUT has detected a condition that      requires adaptation and the SUT is adapting. it is      an error to send any perturbation to the SUT after      this message is sent to the TH until the TH gets a      status message with `adapted`.    * `adapted`, the SUT has finished adapting after      observing a need to. this means that the robot is      moving along its plan again and it is no longer an      error to send perturbations. if this is the status      code of the message, the fields `plan`, `config` and      `sensors` will also be present, to describe the new      state of the robot.

        :return: The status of this Parameters1.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Parameters1.
        one of a enumerated set of statuses to report, arise, as follows:   * `live`, the SUT has processed the configuration data      and is ready for initial perturbations (if any) and the      start of the test    * `mission-running`, the SUT has processed the initial      perturbations after receiving `/start`, possibly      adapted, and the robot is now actually moving along      its path. it is an error to send any perturbation to      the SUT between sending a message to `/start` and      receiving this status.    * `adapting`, the SUT has detected a condition that      requires adaptation and the SUT is adapting. it is      an error to send any perturbation to the SUT after      this message is sent to the TH until the TH gets a      status message with `adapted`.    * `adapted`, the SUT has finished adapting after      observing a need to. this means that the robot is      moving along its plan again and it is no longer an      error to send perturbations. if this is the status      code of the message, the fields `plan`, `config` and      `sensors` will also be present, to describe the new      state of the robot.

        :param status: The status of this Parameters1.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        allowed_values = ["live", "mission-running", "adapting", "adapted"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def message(self):
        """
        Gets the message of this Parameters1.
        human readable text describing the status, if any

        :return: The message of this Parameters1.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Parameters1.
        human readable text describing the status, if any

        :param message: The message of this Parameters1.
        :type: str
        """

        self._message = message

    @property
    def sim_time(self):
        """
        Gets the sim_time of this Parameters1.
        the simulation time the status message was produced

        :return: The sim_time of this Parameters1.
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time):
        """
        Sets the sim_time of this Parameters1.
        the simulation time the status message was produced

        :param sim_time: The sim_time of this Parameters1.
        :type: int
        """
        if sim_time is None:
            raise ValueError("Invalid value for `sim_time`, must not be `None`")
        if sim_time is not None and sim_time < 0:
            raise ValueError("Invalid value for `sim_time`, must be a value greater than or equal to `0`")

        self._sim_time = sim_time

    @property
    def plan(self):
        """
        Gets the plan of this Parameters1.
        list of waypoints the current plan tends to visit, in order. this will be sent if and only if `status == adapted`.

        :return: The plan of this Parameters1.
        :rtype: list[str]
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """
        Sets the plan of this Parameters1.
        list of waypoints the current plan tends to visit, in order. this will be sent if and only if `status == adapted`.

        :param plan: The plan of this Parameters1.
        :type: list[str]
        """

        self._plan = plan

    @property
    def config(self):
        """
        Gets the config of this Parameters1.
        list of currently active nodes. this will be sent if and only if `status == adapted`.

        :return: The config of this Parameters1.
        :rtype: list[str]
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this Parameters1.
        list of currently active nodes. this will be sent if and only if `status == adapted`.

        :param config: The config of this Parameters1.
        :type: list[str]
        """

        self._config = config

    @property
    def sensors(self):
        """
        Gets the sensors of this Parameters1.
        list of currently active sensors, in order. this will be sent if and only if `status == adapted`.

        :return: The sensors of this Parameters1.
        :rtype: list[str]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """
        Sets the sensors of this Parameters1.
        list of currently active sensors, in order. this will be sent if and only if `status == adapted`.

        :param sensors: The sensors of this Parameters1.
        :type: list[str]
        """

        self._sensors = sensors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Parameters1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
