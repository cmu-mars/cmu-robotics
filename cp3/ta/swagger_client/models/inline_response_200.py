# coding: utf-8

"""
    cmu mars brass th: phase 2, cp3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_loc': 'str',
        'target_loc': 'str',
        'use_adaptation': 'bool',
        'start_configuration': 'str',
        'utility_function': 'str'
    }

    attribute_map = {
        'start_loc': 'start-loc',
        'target_loc': 'target-loc',
        'use_adaptation': 'use-adaptation',
        'start_configuration': 'start-configuration',
        'utility_function': 'utility-function'
    }

    def __init__(self, start_loc=None, target_loc=None, use_adaptation=None, start_configuration=None, utility_function=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501

        self._start_loc = None
        self._target_loc = None
        self._use_adaptation = None
        self._start_configuration = None
        self._utility_function = None
        self.discriminator = None

        if start_loc is not None:
            self.start_loc = start_loc
        if target_loc is not None:
            self.target_loc = target_loc
        if use_adaptation is not None:
            self.use_adaptation = use_adaptation
        if start_configuration is not None:
            self.start_configuration = start_configuration
        if utility_function is not None:
            self.utility_function = utility_function

    @property
    def start_loc(self):
        """Gets the start_loc of this InlineResponse200.  # noqa: E501

        the name of the start map waypoint. must be a valid way point name from the map data. must not be equal to `target-loc`.  # noqa: E501

        :return: The start_loc of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._start_loc

    @start_loc.setter
    def start_loc(self, start_loc):
        """Sets the start_loc of this InlineResponse200.

        the name of the start map waypoint. must be a valid way point name from the map data. must not be equal to `target-loc`.  # noqa: E501

        :param start_loc: The start_loc of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._start_loc = start_loc

    @property
    def target_loc(self):
        """Gets the target_loc of this InlineResponse200.  # noqa: E501

        the name of the goal map waypoint. must be a valid way point name from the map data. must not be equal to `start-loc`.  # noqa: E501

        :return: The target_loc of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._target_loc

    @target_loc.setter
    def target_loc(self, target_loc):
        """Sets the target_loc of this InlineResponse200.

        the name of the goal map waypoint. must be a valid way point name from the map data. must not be equal to `start-loc`.  # noqa: E501

        :param target_loc: The target_loc of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._target_loc = target_loc

    @property
    def use_adaptation(self):
        """Gets the use_adaptation of this InlineResponse200.  # noqa: E501

        if `true`, then the DAS will use adapative behaiviours; if `false` then the DAS will not use adaptive behaiviours  # noqa: E501

        :return: The use_adaptation of this InlineResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._use_adaptation

    @use_adaptation.setter
    def use_adaptation(self, use_adaptation):
        """Sets the use_adaptation of this InlineResponse200.

        if `true`, then the DAS will use adapative behaiviours; if `false` then the DAS will not use adaptive behaiviours  # noqa: E501

        :param use_adaptation: The use_adaptation of this InlineResponse200.  # noqa: E501
        :type: bool
        """

        self._use_adaptation = use_adaptation

    @property
    def start_configuration(self):
        """Gets the start_configuration of this InlineResponse200.  # noqa: E501

        the label of the starting configuration for the robot  # noqa: E501

        :return: The start_configuration of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._start_configuration

    @start_configuration.setter
    def start_configuration(self, start_configuration):
        """Sets the start_configuration of this InlineResponse200.

        the label of the starting configuration for the robot  # noqa: E501

        :param start_configuration: The start_configuration of this InlineResponse200.  # noqa: E501
        :type: str
        """
        allowed_values = ["amcl-kinect", "amcl-lidar", "mprt-kinect", "mprt-lidar", "aruco-camera"]  # noqa: E501
        if start_configuration not in allowed_values:
            raise ValueError(
                "Invalid value for `start_configuration` ({0}), must be one of {1}"  # noqa: E501
                .format(start_configuration, allowed_values)
            )

        self._start_configuration = start_configuration

    @property
    def utility_function(self):
        """Gets the utility_function of this InlineResponse200.  # noqa: E501

        the utility function to use for evaluating mission quality  # noqa: E501

        :return: The utility_function of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._utility_function

    @utility_function.setter
    def utility_function(self, utility_function):
        """Sets the utility_function of this InlineResponse200.

        the utility function to use for evaluating mission quality  # noqa: E501

        :param utility_function: The utility_function of this InlineResponse200.  # noqa: E501
        :type: str
        """
        allowed_values = ["favor-timeliness", "favor-safety", "favor-efficiency"]  # noqa: E501
        if utility_function not in allowed_values:
            raise ValueError(
                "Invalid value for `utility_function` ({0}), must be one of {1}"  # noqa: E501
                .format(utility_function, allowed_values)
            )

        self._utility_function = utility_function

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
