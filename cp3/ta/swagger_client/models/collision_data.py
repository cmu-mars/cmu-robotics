# coding: utf-8

"""
    cmu mars brass th: phase 2, cp3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CollisionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'robot_x': 'float',
        'robot_y': 'float',
        'robot_speed': 'float',
        'sim_time': 'int'
    }

    attribute_map = {
        'robot_x': 'robot-x',
        'robot_y': 'robot-y',
        'robot_speed': 'robot-speed',
        'sim_time': 'sim-time'
    }

    def __init__(self, robot_x=None, robot_y=None, robot_speed=None, sim_time=None):  # noqa: E501
        """CollisionData - a model defined in Swagger"""  # noqa: E501

        self._robot_x = None
        self._robot_y = None
        self._robot_speed = None
        self._sim_time = None
        self.discriminator = None

        self.robot_x = robot_x
        self.robot_y = robot_y
        self.robot_speed = robot_speed
        if sim_time is not None:
            self.sim_time = sim_time

    @property
    def robot_x(self):
        """Gets the robot_x of this CollisionData.  # noqa: E501

        The x location of the robot center when collision occured  # noqa: E501

        :return: The robot_x of this CollisionData.  # noqa: E501
        :rtype: float
        """
        return self._robot_x

    @robot_x.setter
    def robot_x(self, robot_x):
        """Sets the robot_x of this CollisionData.

        The x location of the robot center when collision occured  # noqa: E501

        :param robot_x: The robot_x of this CollisionData.  # noqa: E501
        :type: float
        """
        if robot_x is None:
            raise ValueError("Invalid value for `robot_x`, must not be `None`")  # noqa: E501

        self._robot_x = robot_x

    @property
    def robot_y(self):
        """Gets the robot_y of this CollisionData.  # noqa: E501

        The y lcoation of the robot center when collision occured  # noqa: E501

        :return: The robot_y of this CollisionData.  # noqa: E501
        :rtype: float
        """
        return self._robot_y

    @robot_y.setter
    def robot_y(self, robot_y):
        """Sets the robot_y of this CollisionData.

        The y lcoation of the robot center when collision occured  # noqa: E501

        :param robot_y: The robot_y of this CollisionData.  # noqa: E501
        :type: float
        """
        if robot_y is None:
            raise ValueError("Invalid value for `robot_y`, must not be `None`")  # noqa: E501

        self._robot_y = robot_y

    @property
    def robot_speed(self):
        """Gets the robot_speed of this CollisionData.  # noqa: E501

        The speed of the robot (m/s) at the time the collision occured  # noqa: E501

        :return: The robot_speed of this CollisionData.  # noqa: E501
        :rtype: float
        """
        return self._robot_speed

    @robot_speed.setter
    def robot_speed(self, robot_speed):
        """Sets the robot_speed of this CollisionData.

        The speed of the robot (m/s) at the time the collision occured  # noqa: E501

        :param robot_speed: The robot_speed of this CollisionData.  # noqa: E501
        :type: float
        """
        if robot_speed is None:
            raise ValueError("Invalid value for `robot_speed`, must not be `None`")  # noqa: E501

        self._robot_speed = robot_speed

    @property
    def sim_time(self):
        """Gets the sim_time of this CollisionData.  # noqa: E501

        The (simulation) time at which the collision occurred (seconds from start of simulator)  # noqa: E501

        :return: The sim_time of this CollisionData.  # noqa: E501
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time):
        """Sets the sim_time of this CollisionData.

        The (simulation) time at which the collision occurred (seconds from start of simulator)  # noqa: E501

        :param sim_time: The sim_time of this CollisionData.  # noqa: E501
        :type: int
        """

        self._sim_time = sim_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollisionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
