# coding: utf-8

"""
    cmu mars brass th: phase 2, cp3

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Parameters2(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'final_x': 'float',
        'final_y': 'float',
        'final_sim_time': 'int',
        'arrival_predictions': 'list[int]',
        'final_charge': 'int'
    }

    attribute_map = {
        'final_x': 'final-x',
        'final_y': 'final-y',
        'final_sim_time': 'final-sim-time',
        'arrival_predictions': 'arrival-predictions',
        'final_charge': 'final-charge'
    }

    def __init__(self, final_x=None, final_y=None, final_sim_time=None, arrival_predictions=None, final_charge=None):
        """
        Parameters2 - a model defined in Swagger
        """

        self._final_x = None
        self._final_y = None
        self._final_sim_time = None
        self._arrival_predictions = None
        self._final_charge = None

        self.final_x = final_x
        self.final_y = final_y
        self.final_sim_time = final_sim_time
        self.arrival_predictions = arrival_predictions
        self.final_charge = final_charge

    @property
    def final_x(self):
        """
        Gets the final_x of this Parameters2.
        the x coordinate of the robot position when the test ended

        :return: The final_x of this Parameters2.
        :rtype: float
        """
        return self._final_x

    @final_x.setter
    def final_x(self, final_x):
        """
        Sets the final_x of this Parameters2.
        the x coordinate of the robot position when the test ended

        :param final_x: The final_x of this Parameters2.
        :type: float
        """
        if final_x is None:
            raise ValueError("Invalid value for `final_x`, must not be `None`")

        self._final_x = final_x

    @property
    def final_y(self):
        """
        Gets the final_y of this Parameters2.
        the y coordinate of the robot position when the test ended

        :return: The final_y of this Parameters2.
        :rtype: float
        """
        return self._final_y

    @final_y.setter
    def final_y(self, final_y):
        """
        Sets the final_y of this Parameters2.
        the y coordinate of the robot position when the test ended

        :param final_y: The final_y of this Parameters2.
        :type: float
        """
        if final_y is None:
            raise ValueError("Invalid value for `final_y`, must not be `None`")

        self._final_y = final_y

    @property
    def final_sim_time(self):
        """
        Gets the final_sim_time of this Parameters2.
        the simulation time when the mission finished

        :return: The final_sim_time of this Parameters2.
        :rtype: int
        """
        return self._final_sim_time

    @final_sim_time.setter
    def final_sim_time(self, final_sim_time):
        """
        Sets the final_sim_time of this Parameters2.
        the simulation time when the mission finished

        :param final_sim_time: The final_sim_time of this Parameters2.
        :type: int
        """
        if final_sim_time is None:
            raise ValueError("Invalid value for `final_sim_time`, must not be `None`")
        if final_sim_time is not None and final_sim_time < 0:
            raise ValueError("Invalid value for `final_sim_time`, must be a value greater than or equal to `0`")

        self._final_sim_time = final_sim_time

    @property
    def arrival_predictions(self):
        """
        Gets the arrival_predictions of this Parameters2.
        all the predicted arrival times made by the SUT during      the test, in the order they were made.

        :return: The arrival_predictions of this Parameters2.
        :rtype: list[int]
        """
        return self._arrival_predictions

    @arrival_predictions.setter
    def arrival_predictions(self, arrival_predictions):
        """
        Sets the arrival_predictions of this Parameters2.
        all the predicted arrival times made by the SUT during      the test, in the order they were made.

        :param arrival_predictions: The arrival_predictions of this Parameters2.
        :type: list[int]
        """
        if arrival_predictions is None:
            raise ValueError("Invalid value for `arrival_predictions`, must not be `None`")

        self._arrival_predictions = arrival_predictions

    @property
    def final_charge(self):
        """
        Gets the final_charge of this Parameters2.
        the charge left in the battery when the test ended

        :return: The final_charge of this Parameters2.
        :rtype: int
        """
        return self._final_charge

    @final_charge.setter
    def final_charge(self, final_charge):
        """
        Sets the final_charge of this Parameters2.
        the charge left in the battery when the test ended

        :param final_charge: The final_charge of this Parameters2.
        :type: int
        """
        if final_charge is None:
            raise ValueError("Invalid value for `final_charge`, must not be `None`")

        self._final_charge = final_charge

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Parameters2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
