# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CP3InternalStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, message: str=None, sim_time: int=None):  # noqa: E501
        """CP3InternalStatus - a model defined in Swagger

        :param status: The status of this CP3InternalStatus.  # noqa: E501
        :type status: str
        :param message: The message of this CP3InternalStatus.  # noqa: E501
        :type message: str
        :param sim_time: The sim_time of this CP3InternalStatus.  # noqa: E501
        :type sim_time: int
        """
        self.swagger_types = {
            'status': str,
            'message': str,
            'sim_time': int
        }

        self.attribute_map = {
            'status': 'status',
            'message': 'message',
            'sim_time': 'sim-time'
        }

        self._status = status
        self._message = message
        self._sim_time = sim_time

    @classmethod
    def from_dict(cls, dikt) -> 'CP3InternalStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CP3InternalStatus of this CP3InternalStatus.  # noqa: E501
        :rtype: CP3InternalStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this CP3InternalStatus.

        one of a enumerated set of statuses to report, arise, as follows:   * `RAINBOW_READY`, Rainbow is up and ready for the mission     to start    * `MISSION_SUCCEEDED`, According to the SUT, the mission has     successfully completed. This will only be reported in the     Challenge case.    * `MISSION_FAILED`, According to the SUT, the mission has     failed. This will only be reported in the Challenge case.    * `ADAPTING`, the SUT has started adapting, which means looking     for a new plan.        * `ADAPTED`, the SUT has found a new plan and it has been issued to      the system.        * `ADAPTED_FAILED`, the plan failed to be executed on the system        * `FINAL_UTILITY` the final utility achieved by the system. Here the message will simply be a floating point number printed as a string      * `PLAN` the new list of waypoints being visted by the system because of replanning. The message will be a stringified json array of strings.     # noqa: E501

        :return: The status of this CP3InternalStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this CP3InternalStatus.

        one of a enumerated set of statuses to report, arise, as follows:   * `RAINBOW_READY`, Rainbow is up and ready for the mission     to start    * `MISSION_SUCCEEDED`, According to the SUT, the mission has     successfully completed. This will only be reported in the     Challenge case.    * `MISSION_FAILED`, According to the SUT, the mission has     failed. This will only be reported in the Challenge case.    * `ADAPTING`, the SUT has started adapting, which means looking     for a new plan.        * `ADAPTED`, the SUT has found a new plan and it has been issued to      the system.        * `ADAPTED_FAILED`, the plan failed to be executed on the system        * `FINAL_UTILITY` the final utility achieved by the system. Here the message will simply be a floating point number printed as a string      * `PLAN` the new list of waypoints being visted by the system because of replanning. The message will be a stringified json array of strings.     # noqa: E501

        :param status: The status of this CP3InternalStatus.
        :type status: str
        """
        allowed_values = ["RAINBOW_READY", "MISSION_SUCCEEDED", "MISSION_FAILED", "ADAPTING", "ADAPTED", "ADAPTED_FAILED", "FINAL_UTILITY", "PLAN"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def message(self) -> str:
        """Gets the message of this CP3InternalStatus.

        human readable text describing the status, if any  # noqa: E501

        :return: The message of this CP3InternalStatus.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this CP3InternalStatus.

        human readable text describing the status, if any  # noqa: E501

        :param message: The message of this CP3InternalStatus.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def sim_time(self) -> int:
        """Gets the sim_time of this CP3InternalStatus.

        the simulation time the status message was produced  # noqa: E501

        :return: The sim_time of this CP3InternalStatus.
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time: int):
        """Sets the sim_time of this CP3InternalStatus.

        the simulation time the status message was produced  # noqa: E501

        :param sim_time: The sim_time of this CP3InternalStatus.
        :type sim_time: int
        """
        if sim_time is None:
            raise ValueError("Invalid value for `sim_time`, must not be `None`")  # noqa: E501
        if sim_time is not None and sim_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `sim_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sim_time = sim_time
