# coding: utf-8

"""
    cmu mars brass th: phase 2, cp1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def done_post(self, **kwargs):  # noqa: E501
        """done_post  # noqa: E501

        used by the TA to indicate to the TH that the test is over. turtlebot has reached the goal and that the mission has been completed.  note that incomplete missions will result in an error and not use this end point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.done_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Doneparams doneparams:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.done_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.done_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def done_post_with_http_info(self, **kwargs):  # noqa: E501
        """done_post  # noqa: E501

        used by the TA to indicate to the TH that the test is over. turtlebot has reached the goal and that the mission has been completed.  note that incomplete missions will result in an error and not use this end point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.done_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Doneparams doneparams:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['doneparams']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method done_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'doneparams' in params:
            body_params = params['doneparams']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/done', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def error_post(self, **kwargs):  # noqa: E501
        """error_post  # noqa: E501

        used by the TA to indicate to the TH that a non-recoverable error has occurred and the test cannot proceed. the TH will terminate the test upon notification of an error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.error_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Errorparams errorparams:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.error_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.error_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def error_post_with_http_info(self, **kwargs):  # noqa: E501
        """error_post  # noqa: E501

        used by the TA to indicate to the TH that a non-recoverable error has occurred and the test cannot proceed. the TH will terminate the test upon notification of an error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.error_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Errorparams errorparams:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['errorparams']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method error_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'errorparams' in params:
            body_params = params['errorparams']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/error', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ready_post(self, **kwargs):  # noqa: E501
        """ready_post  # noqa: E501

        indicate to the TH that the TA is ready to recieve configuration data to continue starting up the DAS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ready_post(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ready_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ready_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def ready_post_with_http_info(self, **kwargs):  # noqa: E501
        """ready_post  # noqa: E501

        indicate to the TH that the TA is ready to recieve configuration data to continue starting up the DAS  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ready_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ready_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ready', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def status_post(self, **kwargs):  # noqa: E501
        """status_post  # noqa: E501

        used by the TA to periodically indicate its current state to the TH  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.status_post(async=True)
        >>> result = thread.get()

        :param async bool
        :param Statusparams statusparams:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.status_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.status_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def status_post_with_http_info(self, **kwargs):  # noqa: E501
        """status_post  # noqa: E501

        used by the TA to periodically indicate its current state to the TH  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.status_post_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Statusparams statusparams:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statusparams']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method status_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'statusparams' in params:
            body_params = params['statusparams']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
