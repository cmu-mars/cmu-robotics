# coding: utf-8

"""
    cmu mars brass th: phase 2, cp1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Parameters2(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x': 'float',
        'y': 'float',
        'w': 'float',
        'v': 'float',
        'charge': 'int',
        'sim_time': 'int',
        'predicted_arrival': 'int',
        'target_times': 'list[int]',
        'outcome': 'str',
        'message': 'str'
    }

    attribute_map = {
        'x': 'x',
        'y': 'y',
        'w': 'w',
        'v': 'v',
        'charge': 'charge',
        'sim_time': 'sim-time',
        'predicted_arrival': 'predicted-arrival',
        'target_times': 'target-times',
        'outcome': 'outcome',
        'message': 'message'
    }

    def __init__(self, x=None, y=None, w=None, v=None, charge=None, sim_time=None, predicted_arrival=None, target_times=None, outcome=None, message=None):
        """
        Parameters2 - a model defined in Swagger
        """

        self._x = None
        self._y = None
        self._w = None
        self._v = None
        self._charge = None
        self._sim_time = None
        self._predicted_arrival = None
        self._target_times = None
        self._outcome = None
        self._message = None

        self.x = x
        self.y = y
        self.w = w
        self.v = v
        self.charge = charge
        self.sim_time = sim_time
        self.predicted_arrival = predicted_arrival
        if target_times is not None:
          self.target_times = target_times
        self.outcome = outcome
        if message is not None:
          self.message = message

    @property
    def x(self):
        """
        Gets the x of this Parameters2.
        final x-coordinate of the turtlebot

        :return: The x of this Parameters2.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """
        Sets the x of this Parameters2.
        final x-coordinate of the turtlebot

        :param x: The x of this Parameters2.
        :type: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")

        self._x = x

    @property
    def y(self):
        """
        Gets the y of this Parameters2.
        final y-coordinate of the turtlebot

        :return: The y of this Parameters2.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """
        Sets the y of this Parameters2.
        final y-coordinate of the turtlebot

        :param y: The y of this Parameters2.
        :type: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")

        self._y = y

    @property
    def w(self):
        """
        Gets the w of this Parameters2.
        final yaw of the turtlebot

        :return: The w of this Parameters2.
        :rtype: float
        """
        return self._w

    @w.setter
    def w(self, w):
        """
        Sets the w of this Parameters2.
        final yaw of the turtlebot

        :param w: The w of this Parameters2.
        :type: float
        """
        if w is None:
            raise ValueError("Invalid value for `w`, must not be `None`")

        self._w = w

    @property
    def v(self):
        """
        Gets the v of this Parameters2.
        final velocity of the turtlebot

        :return: The v of this Parameters2.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v):
        """
        Sets the v of this Parameters2.
        final velocity of the turtlebot

        :param v: The v of this Parameters2.
        :type: float
        """
        if v is None:
            raise ValueError("Invalid value for `v`, must not be `None`")

        self._v = v

    @property
    def charge(self):
        """
        Gets the charge of this Parameters2.
        final charge measure of the turtlebot. cannot be more than the maximum specified in the response from `/ready`.

        :return: The charge of this Parameters2.
        :rtype: int
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """
        Sets the charge of this Parameters2.
        final charge measure of the turtlebot. cannot be more than the maximum specified in the response from `/ready`.

        :param charge: The charge of this Parameters2.
        :type: int
        """
        if charge is None:
            raise ValueError("Invalid value for `charge`, must not be `None`")
        if charge is not None and charge < 0:
            raise ValueError("Invalid value for `charge`, must be a value greater than or equal to `0`")

        self._charge = charge

    @property
    def sim_time(self):
        """
        Gets the sim_time of this Parameters2.
        the final internal simulation time

        :return: The sim_time of this Parameters2.
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time):
        """
        Sets the sim_time of this Parameters2.
        the final internal simulation time

        :param sim_time: The sim_time of this Parameters2.
        :type: int
        """
        if sim_time is None:
            raise ValueError("Invalid value for `sim_time`, must not be `None`")
        if sim_time is not None and sim_time < 0:
            raise ValueError("Invalid value for `sim_time`, must be a value greater than or equal to `0`")

        self._sim_time = sim_time

    @property
    def predicted_arrival(self):
        """
        Gets the predicted_arrival of this Parameters2.
        final best prediction of arrival time, in simulation time

        :return: The predicted_arrival of this Parameters2.
        :rtype: int
        """
        return self._predicted_arrival

    @predicted_arrival.setter
    def predicted_arrival(self, predicted_arrival):
        """
        Sets the predicted_arrival of this Parameters2.
        final best prediction of arrival time, in simulation time

        :param predicted_arrival: The predicted_arrival of this Parameters2.
        :type: int
        """
        if predicted_arrival is None:
            raise ValueError("Invalid value for `predicted_arrival`, must not be `None`")
        if predicted_arrival is not None and predicted_arrival < 0:
            raise ValueError("Invalid value for `predicted_arrival`, must be a value greater than or equal to `0`")

        self._predicted_arrival = predicted_arrival

    @property
    def target_times(self):
        """
        Gets the target_times of this Parameters2.
        the simulation times when each of the waypoints listed in `target-locs` were reached.

        :return: The target_times of this Parameters2.
        :rtype: list[int]
        """
        return self._target_times

    @target_times.setter
    def target_times(self, target_times):
        """
        Sets the target_times of this Parameters2.
        the simulation times when each of the waypoints listed in `target-locs` were reached.

        :param target_times: The target_times of this Parameters2.
        :type: list[int]
        """

        self._target_times = target_times

    @property
    def outcome(self):
        """
        Gets the outcome of this Parameters2.
        indicates the reason why the test is over   * at-goal - the turtlebot has reached the goal and               completed the mission objectives   * out-of-battery - the battery on the turtlebot has run                      out, and cannot be charged, so the                      turtlebot cannot make progress   * other-outcome - the test is over for any other                     non-error reason

        :return: The outcome of this Parameters2.
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """
        Sets the outcome of this Parameters2.
        indicates the reason why the test is over   * at-goal - the turtlebot has reached the goal and               completed the mission objectives   * out-of-battery - the battery on the turtlebot has run                      out, and cannot be charged, so the                      turtlebot cannot make progress   * other-outcome - the test is over for any other                     non-error reason

        :param outcome: The outcome of this Parameters2.
        :type: str
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")
        allowed_values = ["at-goal", "out-of-battery", "other-outcome"]
        if outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome` ({0}), must be one of {1}"
                .format(outcome, allowed_values)
            )

        self._outcome = outcome

    @property
    def message(self):
        """
        Gets the message of this Parameters2.
        human-readable text with more information about the end of the test.

        :return: The message of this Parameters2.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Parameters2.
        human-readable text with more information about the end of the test.

        :param message: The message of this Parameters2.
        :type: str
        """

        self._message = message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Parameters2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
