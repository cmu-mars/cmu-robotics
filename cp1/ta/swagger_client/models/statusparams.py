# coding: utf-8

"""
    cmu mars brass th: phase 2, cp1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Statusparams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'x': 'float',
        'y': 'float',
        'charge': 'int',
        'sim_time': 'int'
    }

    attribute_map = {
        'status': 'status',
        'x': 'x',
        'y': 'y',
        'charge': 'charge',
        'sim_time': 'sim-time'
    }

    def __init__(self, status=None, x=None, y=None, charge=None, sim_time=None):  # noqa: E501
        """Statusparams - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._x = None
        self._y = None
        self._charge = None
        self._sim_time = None
        self.discriminator = None

        self.status = status
        self.x = x
        self.y = y
        self.charge = charge
        self.sim_time = sim_time

    @property
    def status(self):
        """Gets the status of this Statusparams.  # noqa: E501

        one of the possible status codes   * learning-started - the learning phase has started   * learning-done - the learning phase has been   * adapt-started - the SUT has started adapting and                    cannot be perturbed   * adapt-done - the SUT has finished adapting   * charging-started - the turtlebot is currently charging   * charging-done - the turtlebot has stopped charging   * at-waypoint - the turtlebot has arrived at one of the    waypoints in the list received from /ready  # noqa: E501

        :return: The status of this Statusparams.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Statusparams.

        one of the possible status codes   * learning-started - the learning phase has started   * learning-done - the learning phase has been   * adapt-started - the SUT has started adapting and                    cannot be perturbed   * adapt-done - the SUT has finished adapting   * charging-started - the turtlebot is currently charging   * charging-done - the turtlebot has stopped charging   * at-waypoint - the turtlebot has arrived at one of the    waypoints in the list received from /ready  # noqa: E501

        :param status: The status of this Statusparams.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["learning-started", "learning-done", "adapt-started", "adapt-done", "charging-started", "charging-done", "at-waypoint"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def x(self):
        """Gets the x of this Statusparams.  # noqa: E501

        current x-coordinate of the turtlebot  # noqa: E501

        :return: The x of this Statusparams.  # noqa: E501
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Statusparams.

        current x-coordinate of the turtlebot  # noqa: E501

        :param x: The x of this Statusparams.  # noqa: E501
        :type: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """Gets the y of this Statusparams.  # noqa: E501

        current y-coordinate of the turtlebot  # noqa: E501

        :return: The y of this Statusparams.  # noqa: E501
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Statusparams.

        current y-coordinate of the turtlebot  # noqa: E501

        :param y: The y of this Statusparams.  # noqa: E501
        :type: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501

        self._y = y

    @property
    def charge(self):
        """Gets the charge of this Statusparams.  # noqa: E501

        current turtlebot battery charge in mWh. cannot be more than the maximum specified in the response from `/ready`.  # noqa: E501

        :return: The charge of this Statusparams.  # noqa: E501
        :rtype: int
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this Statusparams.

        current turtlebot battery charge in mWh. cannot be more than the maximum specified in the response from `/ready`.  # noqa: E501

        :param charge: The charge of this Statusparams.  # noqa: E501
        :type: int
        """
        if charge is None:
            raise ValueError("Invalid value for `charge`, must not be `None`")  # noqa: E501
        if charge is not None and charge < 0:  # noqa: E501
            raise ValueError("Invalid value for `charge`, must be a value greater than or equal to `0`")  # noqa: E501

        self._charge = charge

    @property
    def sim_time(self):
        """Gets the sim_time of this Statusparams.  # noqa: E501

        the internal simulation time at the time that the status message was sent  # noqa: E501

        :return: The sim_time of this Statusparams.  # noqa: E501
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time):
        """Sets the sim_time of this Statusparams.

        the internal simulation time at the time that the status message was sent  # noqa: E501

        :param sim_time: The sim_time of this Statusparams.  # noqa: E501
        :type: int
        """
        if sim_time is None:
            raise ValueError("Invalid value for `sim_time`, must not be `None`")  # noqa: E501
        if sim_time is not None and sim_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `sim_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sim_time = sim_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Statusparams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
