# coding: utf-8

"""
    cmu mars brass th: phase 2, cp1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse200(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'start_loc': 'str',
        'target_locs': 'list[str]',
        'discharge_function': 'str',
        'discharge_budget': 'int',
        'charge_function': 'str',
        'charge_budget': 'int',
        'max_charge': 'int'
    }

    attribute_map = {
        'level': 'level',
        'start_loc': 'start-loc',
        'target_locs': 'target-locs',
        'discharge_function': 'discharge-function',
        'discharge_budget': 'discharge-budget',
        'charge_function': 'charge-function',
        'charge_budget': 'charge-budget',
        'max_charge': 'max-charge'
    }

    def __init__(self, level=None, start_loc=None, target_locs=None, discharge_function=None, discharge_budget=None, charge_function=None, charge_budget=None, max_charge=None):
        """
        InlineResponse200 - a model defined in Swagger
        """

        self._level = None
        self._start_loc = None
        self._target_locs = None
        self._discharge_function = None
        self._discharge_budget = None
        self._charge_function = None
        self._charge_budget = None
        self._max_charge = None

        self.level = level
        self.start_loc = start_loc
        self.target_locs = target_locs
        if discharge_function is not None:
          self.discharge_function = discharge_function
        if discharge_budget is not None:
          self.discharge_budget = discharge_budget
        if charge_function is not None:
          self.charge_function = charge_function
        if charge_budget is not None:
          self.charge_budget = charge_budget
        if max_charge is not None:
          self.max_charge = max_charge

    @property
    def level(self):
        """
        Gets the level of this InlineResponse200.
        the level at which the DAS should operate for this test. as given in the CP definition,   * a - no perturbations, no adaptation, no power model   * b - perturbations, but no adaptation, no power model   * bprime - perturbations and adaptation, but a static         power model for discharge/charge, while planner         uses a different static power model   * c - perturbations and adaptation, with charge and         discharge power models provided and learned

        :return: The level of this InlineResponse200.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this InlineResponse200.
        the level at which the DAS should operate for this test. as given in the CP definition,   * a - no perturbations, no adaptation, no power model   * b - perturbations, but no adaptation, no power model   * bprime - perturbations and adaptation, but a static         power model for discharge/charge, while planner         uses a different static power model   * c - perturbations and adaptation, with charge and         discharge power models provided and learned

        :param level: The level of this InlineResponse200.
        :type: str
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")
        allowed_values = ["a", "b", "bprime", "c"]
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def start_loc(self):
        """
        Gets the start_loc of this InlineResponse200.
        the name of the start map waypoint. start-loc must not be the same as the first item of `target-locs`.

        :return: The start_loc of this InlineResponse200.
        :rtype: str
        """
        return self._start_loc

    @start_loc.setter
    def start_loc(self, start_loc):
        """
        Sets the start_loc of this InlineResponse200.
        the name of the start map waypoint. start-loc must not be the same as the first item of `target-locs`.

        :param start_loc: The start_loc of this InlineResponse200.
        :type: str
        """
        if start_loc is None:
            raise ValueError("Invalid value for `start_loc`, must not be `None`")

        self._start_loc = start_loc

    @property
    def target_locs(self):
        """
        Gets the target_locs of this InlineResponse200.
        the names of the waypoints to visit, in the order in which they must be visited. each name must be a valid name of a waypoint on the map. `target-locs` must not be the empty list. every adjacent pair of elements of `target-locs` must be disequal -- that is to say, it is not permitted to direct the robot to travel to the waypoint where it is already located.

        :return: The target_locs of this InlineResponse200.
        :rtype: list[str]
        """
        return self._target_locs

    @target_locs.setter
    def target_locs(self, target_locs):
        """
        Sets the target_locs of this InlineResponse200.
        the names of the waypoints to visit, in the order in which they must be visited. each name must be a valid name of a waypoint on the map. `target-locs` must not be the empty list. every adjacent pair of elements of `target-locs` must be disequal -- that is to say, it is not permitted to direct the robot to travel to the waypoint where it is already located.

        :param target_locs: The target_locs of this InlineResponse200.
        :type: list[str]
        """
        if target_locs is None:
            raise ValueError("Invalid value for `target_locs`, must not be `None`")

        self._target_locs = target_locs

    @property
    def discharge_function(self):
        """
        Gets the discharge_function of this InlineResponse200.
        if in level d, a description of the function dictating the discharge of the battery, which is what we will learn.

        :return: The discharge_function of this InlineResponse200.
        :rtype: str
        """
        return self._discharge_function

    @discharge_function.setter
    def discharge_function(self, discharge_function):
        """
        Sets the discharge_function of this InlineResponse200.
        if in level d, a description of the function dictating the discharge of the battery, which is what we will learn.

        :param discharge_function: The discharge_function of this InlineResponse200.
        :type: str
        """

        self._discharge_function = discharge_function

    @property
    def discharge_budget(self):
        """
        Gets the discharge_budget of this InlineResponse200.
        if in level d, the maximum number of queries against the target function during learning

        :return: The discharge_budget of this InlineResponse200.
        :rtype: int
        """
        return self._discharge_budget

    @discharge_budget.setter
    def discharge_budget(self, discharge_budget):
        """
        Sets the discharge_budget of this InlineResponse200.
        if in level d, the maximum number of queries against the target function during learning

        :param discharge_budget: The discharge_budget of this InlineResponse200.
        :type: int
        """

        self._discharge_budget = discharge_budget

    @property
    def charge_function(self):
        """
        Gets the charge_function of this InlineResponse200.
        if in level d, a description of the function dictating the recharging of the battery, which is what we will learn.

        :return: The charge_function of this InlineResponse200.
        :rtype: str
        """
        return self._charge_function

    @charge_function.setter
    def charge_function(self, charge_function):
        """
        Sets the charge_function of this InlineResponse200.
        if in level d, a description of the function dictating the recharging of the battery, which is what we will learn.

        :param charge_function: The charge_function of this InlineResponse200.
        :type: str
        """

        self._charge_function = charge_function

    @property
    def charge_budget(self):
        """
        Gets the charge_budget of this InlineResponse200.
        if in level d, the maximum number of queries against the target recharging function during learning

        :return: The charge_budget of this InlineResponse200.
        :rtype: int
        """
        return self._charge_budget

    @charge_budget.setter
    def charge_budget(self, charge_budget):
        """
        Sets the charge_budget of this InlineResponse200.
        if in level d, the maximum number of queries against the target recharging function during learning

        :param charge_budget: The charge_budget of this InlineResponse200.
        :type: int
        """

        self._charge_budget = charge_budget

    @property
    def max_charge(self):
        """
        Gets the max_charge of this InlineResponse200.
        if in level d, the maximum charge the battery can hold, in mWh. implicitly, all batteries have a minimum possible charge of 0 mWh

        :return: The max_charge of this InlineResponse200.
        :rtype: int
        """
        return self._max_charge

    @max_charge.setter
    def max_charge(self, max_charge):
        """
        Sets the max_charge of this InlineResponse200.
        if in level d, the maximum charge the battery can hold, in mWh. implicitly, all batteries have a minimum possible charge of 0 mWh

        :param max_charge: The max_charge of this InlineResponse200.
        :type: int
        """
        if max_charge is not None and max_charge < 0:
            raise ValueError("Invalid value for `max_charge`, must be a value greater than or equal to `0`")

        self._max_charge = max_charge

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
