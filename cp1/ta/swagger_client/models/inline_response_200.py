# coding: utf-8

"""
    cmu mars brass th: phase 2, cp1

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'start_loc': 'str',
        'target_locs': 'list[str]',
        'power_model': 'int',
        'discharge_budget': 'int'
    }

    attribute_map = {
        'level': 'level',
        'start_loc': 'start-loc',
        'target_locs': 'target-locs',
        'power_model': 'power-model',
        'discharge_budget': 'discharge-budget'
    }

    def __init__(self, level=None, start_loc=None, target_locs=None, power_model=None, discharge_budget=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501

        self._level = None
        self._start_loc = None
        self._target_locs = None
        self._power_model = None
        self._discharge_budget = None
        self.discriminator = None

        self.level = level
        self.start_loc = start_loc
        self.target_locs = target_locs
        if power_model is not None:
            self.power_model = power_model
        if discharge_budget is not None:
            self.discharge_budget = discharge_budget

    @property
    def level(self):
        """Gets the level of this InlineResponse200.  # noqa: E501

        the level at which the DAS should operate for this test. as given in the CP definition,    * a - no perturbations, no adaptation, no power model    * b - perturbations, but no adaptation, no power model    * c - perturbations and adaptation, with charge and         discharge power models provided and learned  # noqa: E501

        :return: The level of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this InlineResponse200.

        the level at which the DAS should operate for this test. as given in the CP definition,    * a - no perturbations, no adaptation, no power model    * b - perturbations, but no adaptation, no power model    * c - perturbations and adaptation, with charge and         discharge power models provided and learned  # noqa: E501

        :param level: The level of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501
        allowed_values = ["a", "b", "c"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def start_loc(self):
        """Gets the start_loc of this InlineResponse200.  # noqa: E501

        the name of the start map waypoint. start-loc must not be the same as the first item of `target-locs`.  # noqa: E501

        :return: The start_loc of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._start_loc

    @start_loc.setter
    def start_loc(self, start_loc):
        """Sets the start_loc of this InlineResponse200.

        the name of the start map waypoint. start-loc must not be the same as the first item of `target-locs`.  # noqa: E501

        :param start_loc: The start_loc of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if start_loc is None:
            raise ValueError("Invalid value for `start_loc`, must not be `None`")  # noqa: E501

        self._start_loc = start_loc

    @property
    def target_locs(self):
        """Gets the target_locs of this InlineResponse200.  # noqa: E501

        the names of the waypoints to visit, in the order in which they must be visited. each name must be a valid name of a waypoint on the map. `target-locs` must not be the empty list.  every adjacent pair of elements of `target-locs` must be disequal -- that is to say, it is not permitted to direct the robot to travel to the waypoint where it is already located.  # noqa: E501

        :return: The target_locs of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_locs

    @target_locs.setter
    def target_locs(self, target_locs):
        """Sets the target_locs of this InlineResponse200.

        the names of the waypoints to visit, in the order in which they must be visited. each name must be a valid name of a waypoint on the map. `target-locs` must not be the empty list.  every adjacent pair of elements of `target-locs` must be disequal -- that is to say, it is not permitted to direct the robot to travel to the waypoint where it is already located.  # noqa: E501

        :param target_locs: The target_locs of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """
        if target_locs is None:
            raise ValueError("Invalid value for `target_locs`, must not be `None`")  # noqa: E501

        self._target_locs = target_locs

    @property
    def power_model(self):
        """Gets the power_model of this InlineResponse200.  # noqa: E501

        if in level c, the name of the power model from the test data to use for this test. each power model includes at least a function describing how the battery charges, discharges, and a maximum possible charge.  # noqa: E501

        :return: The power_model of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._power_model

    @power_model.setter
    def power_model(self, power_model):
        """Sets the power_model of this InlineResponse200.

        if in level c, the name of the power model from the test data to use for this test. each power model includes at least a function describing how the battery charges, discharges, and a maximum possible charge.  # noqa: E501

        :param power_model: The power_model of this InlineResponse200.  # noqa: E501
        :type: int
        """
        if power_model is not None and power_model > 99:  # noqa: E501
            raise ValueError("Invalid value for `power_model`, must be a value less than or equal to `99`")  # noqa: E501
        if power_model is not None and power_model < 0:  # noqa: E501
            raise ValueError("Invalid value for `power_model`, must be a value greater than or equal to `0`")  # noqa: E501

        self._power_model = power_model

    @property
    def discharge_budget(self):
        """Gets the discharge_budget of this InlineResponse200.  # noqa: E501

        if in level c, the maximum number of queries against the target function during learning  # noqa: E501

        :return: The discharge_budget of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._discharge_budget

    @discharge_budget.setter
    def discharge_budget(self, discharge_budget):
        """Sets the discharge_budget of this InlineResponse200.

        if in level c, the maximum number of queries against the target function during learning  # noqa: E501

        :param discharge_budget: The discharge_budget of this InlineResponse200.  # noqa: E501
        :type: int
        """
        if discharge_budget is not None and discharge_budget > 1048576:  # noqa: E501
            raise ValueError("Invalid value for `discharge_budget`, must be a value less than or equal to `1048576`")  # noqa: E501
        if discharge_budget is not None and discharge_budget < 2:  # noqa: E501
            raise ValueError("Invalid value for `discharge_budget`, must be a value greater than or equal to `2`")  # noqa: E501

        self._discharge_budget = discharge_budget

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
