# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse4001(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, cause: str=None, message: str=None):  # noqa: E501
        """InlineResponse4001 - a model defined in Swagger

        :param cause: The cause of this InlineResponse4001.  # noqa: E501
        :type cause: str
        :param message: The message of this InlineResponse4001.  # noqa: E501
        :type message: str
        """
        self.swagger_types = {
            'cause': str,
            'message': str
        }

        self.attribute_map = {
            'cause': 'cause',
            'message': 'message'
        }

        self._cause = cause
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse4001':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_400_1 of this InlineResponse4001.  # noqa: E501
        :rtype: InlineResponse4001
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cause(self) -> str:
        """Gets the cause of this InlineResponse4001.

        a reason for the error condition. `bad-obstacleid` is used if this endpoint is given a obstacleid in its parameters that was not given out by place-obstacle; `other-error` is used in all other instances.  # noqa: E501

        :return: The cause of this InlineResponse4001.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause: str):
        """Sets the cause of this InlineResponse4001.

        a reason for the error condition. `bad-obstacleid` is used if this endpoint is given a obstacleid in its parameters that was not given out by place-obstacle; `other-error` is used in all other instances.  # noqa: E501

        :param cause: The cause of this InlineResponse4001.
        :type cause: str
        """
        allowed_values = ["bad-obstacleid", "other-error"]  # noqa: E501
        if cause not in allowed_values:
            raise ValueError(
                "Invalid value for `cause` ({0}), must be one of {1}"
                .format(cause, allowed_values)
            )

        self._cause = cause

    @property
    def message(self) -> str:
        """Gets the message of this InlineResponse4001.

        human readable info about what went wrong  # noqa: E501

        :return: The message of this InlineResponse4001.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this InlineResponse4001.

        human readable info about what went wrong  # noqa: E501

        :param message: The message of this InlineResponse4001.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
