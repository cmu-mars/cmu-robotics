# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class InlineResponse200(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, obstacleid: str=None, topleft_x: float=None, topleft_y: float=None, botright_x: float=None, botright_y: float=None, sim_time: int=None):
        """
        InlineResponse200 - a model defined in Swagger

        :param obstacleid: The obstacleid of this InlineResponse200.
        :type obstacleid: str
        :param topleft_x: The topleft_x of this InlineResponse200.
        :type topleft_x: float
        :param topleft_y: The topleft_y of this InlineResponse200.
        :type topleft_y: float
        :param botright_x: The botright_x of this InlineResponse200.
        :type botright_x: float
        :param botright_y: The botright_y of this InlineResponse200.
        :type botright_y: float
        :param sim_time: The sim_time of this InlineResponse200.
        :type sim_time: int
        """
        self.swagger_types = {
            'obstacleid': str,
            'topleft_x': float,
            'topleft_y': float,
            'botright_x': float,
            'botright_y': float,
            'sim_time': int
        }

        self.attribute_map = {
            'obstacleid': 'obstacleid',
            'topleft_x': 'topleft_x',
            'topleft_y': 'topleft_y',
            'botright_x': 'botright_x',
            'botright_y': 'botright_y',
            'sim_time': 'sim_time'
        }

        self._obstacleid = obstacleid
        self._topleft_x = topleft_x
        self._topleft_y = topleft_y
        self._botright_x = botright_x
        self._botright_y = botright_y
        self._sim_time = sim_time

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.
        :rtype: InlineResponse200
        """
        return deserialize_model(dikt, cls)

    @property
    def obstacleid(self) -> str:
        """
        Gets the obstacleid of this InlineResponse200.
        a unique identifier for this particular placed obstacle, so that it can be removed in the future

        :return: The obstacleid of this InlineResponse200.
        :rtype: str
        """
        return self._obstacleid

    @obstacleid.setter
    def obstacleid(self, obstacleid: str):
        """
        Sets the obstacleid of this InlineResponse200.
        a unique identifier for this particular placed obstacle, so that it can be removed in the future

        :param obstacleid: The obstacleid of this InlineResponse200.
        :type obstacleid: str
        """
        if obstacleid is None:
            raise ValueError("Invalid value for `obstacleid`, must not be `None`")

        self._obstacleid = obstacleid

    @property
    def topleft_x(self) -> float:
        """
        Gets the topleft_x of this InlineResponse200.
        the x-coordinate of the top left corner of the bounding box of the placed obstacle

        :return: The topleft_x of this InlineResponse200.
        :rtype: float
        """
        return self._topleft_x

    @topleft_x.setter
    def topleft_x(self, topleft_x: float):
        """
        Sets the topleft_x of this InlineResponse200.
        the x-coordinate of the top left corner of the bounding box of the placed obstacle

        :param topleft_x: The topleft_x of this InlineResponse200.
        :type topleft_x: float
        """
        if topleft_x is None:
            raise ValueError("Invalid value for `topleft_x`, must not be `None`")

        self._topleft_x = topleft_x

    @property
    def topleft_y(self) -> float:
        """
        Gets the topleft_y of this InlineResponse200.
        the y-coordinate of the top left corner of the bounding box of the placed obstacle

        :return: The topleft_y of this InlineResponse200.
        :rtype: float
        """
        return self._topleft_y

    @topleft_y.setter
    def topleft_y(self, topleft_y: float):
        """
        Sets the topleft_y of this InlineResponse200.
        the y-coordinate of the top left corner of the bounding box of the placed obstacle

        :param topleft_y: The topleft_y of this InlineResponse200.
        :type topleft_y: float
        """
        if topleft_y is None:
            raise ValueError("Invalid value for `topleft_y`, must not be `None`")

        self._topleft_y = topleft_y

    @property
    def botright_x(self) -> float:
        """
        Gets the botright_x of this InlineResponse200.
        the x-coordinate of the bottom right corner of the bounding box of the placed obstacle

        :return: The botright_x of this InlineResponse200.
        :rtype: float
        """
        return self._botright_x

    @botright_x.setter
    def botright_x(self, botright_x: float):
        """
        Sets the botright_x of this InlineResponse200.
        the x-coordinate of the bottom right corner of the bounding box of the placed obstacle

        :param botright_x: The botright_x of this InlineResponse200.
        :type botright_x: float
        """
        if botright_x is None:
            raise ValueError("Invalid value for `botright_x`, must not be `None`")

        self._botright_x = botright_x

    @property
    def botright_y(self) -> float:
        """
        Gets the botright_y of this InlineResponse200.
        the y-coordinate of the bottom right corner of the bounding box of the placed obstacle

        :return: The botright_y of this InlineResponse200.
        :rtype: float
        """
        return self._botright_y

    @botright_y.setter
    def botright_y(self, botright_y: float):
        """
        Sets the botright_y of this InlineResponse200.
        the y-coordinate of the bottom right corner of the bounding box of the placed obstacle

        :param botright_y: The botright_y of this InlineResponse200.
        :type botright_y: float
        """
        if botright_y is None:
            raise ValueError("Invalid value for `botright_y`, must not be `None`")

        self._botright_y = botright_y

    @property
    def sim_time(self) -> int:
        """
        Gets the sim_time of this InlineResponse200.
        the simulation time when the obstacle was placed

        :return: The sim_time of this InlineResponse200.
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time: int):
        """
        Sets the sim_time of this InlineResponse200.
        the simulation time when the obstacle was placed

        :param sim_time: The sim_time of this InlineResponse200.
        :type sim_time: int
        """
        if sim_time is None:
            raise ValueError("Invalid value for `sim_time`, must not be `None`")

        self._sim_time = sim_time

