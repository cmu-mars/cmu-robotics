# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Parameters2(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, charge: float=None):
        """
        Parameters2 - a model defined in Swagger

        :param charge: The charge of this Parameters2.
        :type charge: float
        """
        self.swagger_types = {
            'charge': float
        }

        self.attribute_map = {
            'charge': 'charge'
        }

        self._charge = charge

    @classmethod
    def from_dict(cls, dikt) -> 'Parameters2':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parameters_2 of this Parameters2.
        :rtype: Parameters2
        """
        return deserialize_model(dikt, cls)

    @property
    def charge(self) -> float:
        """
        Gets the charge of this Parameters2.
        the level to which the battery should be set, in mWh. cannot be more than the maximum given in the TH response to `/ready`.

        :return: The charge of this Parameters2.
        :rtype: float
        """
        return self._charge

    @charge.setter
    def charge(self, charge: float):
        """
        Sets the charge of this Parameters2.
        the level to which the battery should be set, in mWh. cannot be more than the maximum given in the TH response to `/ready`.

        :param charge: The charge of this Parameters2.
        :type charge: float
        """
        if charge is None:
            raise ValueError("Invalid value for `charge`, must not be `None`")
        if charge is not None and charge < 0:
            raise ValueError("Invalid value for `charge`, must be a value greater than or equal to `0`")

        self._charge = charge

