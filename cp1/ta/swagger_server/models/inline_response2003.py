# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class InlineResponse2003(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, x: float=None, y: float=None, battery: int=None, sim_time: int=None):
        """
        InlineResponse2003 - a model defined in Swagger

        :param x: The x of this InlineResponse2003.
        :type x: float
        :param y: The y of this InlineResponse2003.
        :type y: float
        :param battery: The battery of this InlineResponse2003.
        :type battery: int
        :param sim_time: The sim_time of this InlineResponse2003.
        :type sim_time: int
        """
        self.swagger_types = {
            'x': float,
            'y': float,
            'battery': int,
            'sim_time': int
        }

        self.attribute_map = {
            'x': 'x',
            'y': 'y',
            'battery': 'battery',
            'sim_time': 'sim-time'
        }

        self._x = x
        self._y = y
        self._battery = battery
        self._sim_time = sim_time

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2003':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_3 of this InlineResponse2003.
        :rtype: InlineResponse2003
        """
        return deserialize_model(dikt, cls)

    @property
    def x(self) -> float:
        """
        Gets the x of this InlineResponse2003.
        the current x coordinate of the bot. must be within the boundaries of the map.

        :return: The x of this InlineResponse2003.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x: float):
        """
        Sets the x of this InlineResponse2003.
        the current x coordinate of the bot. must be within the boundaries of the map.

        :param x: The x of this InlineResponse2003.
        :type x: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")

        self._x = x

    @property
    def y(self) -> float:
        """
        Gets the y of this InlineResponse2003.
        the current y coordinate of the bot. must be within the boundaries of the map.

        :return: The y of this InlineResponse2003.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y: float):
        """
        Sets the y of this InlineResponse2003.
        the current y coordinate of the bot. must be within the boundaries of the map.

        :param y: The y of this InlineResponse2003.
        :type y: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")

        self._y = y

    @property
    def battery(self) -> int:
        """
        Gets the battery of this InlineResponse2003.
        the current charge of the battery, in mWh

        :return: The battery of this InlineResponse2003.
        :rtype: int
        """
        return self._battery

    @battery.setter
    def battery(self, battery: int):
        """
        Sets the battery of this InlineResponse2003.
        the current charge of the battery, in mWh

        :param battery: The battery of this InlineResponse2003.
        :type battery: int
        """
        if battery is None:
            raise ValueError("Invalid value for `battery`, must not be `None`")
        if battery is not None and battery < 0:
            raise ValueError("Invalid value for `battery`, must be a value greater than or equal to `0`")

        self._battery = battery

    @property
    def sim_time(self) -> int:
        """
        Gets the sim_time of this InlineResponse2003.
        the time when this observation was computed, in simulation seconds

        :return: The sim_time of this InlineResponse2003.
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time: int):
        """
        Sets the sim_time of this InlineResponse2003.
        the time when this observation was computed, in simulation seconds

        :param sim_time: The sim_time of this InlineResponse2003.
        :type sim_time: int
        """
        if sim_time is None:
            raise ValueError("Invalid value for `sim_time`, must not be `None`")
        if sim_time is not None and sim_time < 0:
            raise ValueError("Invalid value for `sim_time`, must be a value greater than or equal to `0`")

        self._sim_time = sim_time

