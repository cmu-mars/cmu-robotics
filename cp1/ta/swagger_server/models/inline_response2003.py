# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class InlineResponse2003(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, x: float=None, y: float=None, w: float=None, v: float=None, charge: int=None, predicted_arrival: int=None, sim_time: int=None):
        """
        InlineResponse2003 - a model defined in Swagger

        :param x: The x of this InlineResponse2003.
        :type x: float
        :param y: The y of this InlineResponse2003.
        :type y: float
        :param w: The w of this InlineResponse2003.
        :type w: float
        :param v: The v of this InlineResponse2003.
        :type v: float
        :param charge: The charge of this InlineResponse2003.
        :type charge: int
        :param predicted_arrival: The predicted_arrival of this InlineResponse2003.
        :type predicted_arrival: int
        :param sim_time: The sim_time of this InlineResponse2003.
        :type sim_time: int
        """
        self.swagger_types = {
            'x': float,
            'y': float,
            'w': float,
            'v': float,
            'charge': int,
            'predicted_arrival': int,
            'sim_time': int
        }

        self.attribute_map = {
            'x': 'x',
            'y': 'y',
            'w': 'w',
            'v': 'v',
            'charge': 'charge',
            'predicted_arrival': 'predicted_arrival',
            'sim_time': 'sim_time'
        }

        self._x = x
        self._y = y
        self._w = w
        self._v = v
        self._charge = charge
        self._predicted_arrival = predicted_arrival
        self._sim_time = sim_time

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse2003':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200_3 of this InlineResponse2003.
        :rtype: InlineResponse2003
        """
        return deserialize_model(dikt, cls)

    @property
    def x(self) -> float:
        """
        Gets the x of this InlineResponse2003.
        current x-coordinate of the turtlebot position

        :return: The x of this InlineResponse2003.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x: float):
        """
        Sets the x of this InlineResponse2003.
        current x-coordinate of the turtlebot position

        :param x: The x of this InlineResponse2003.
        :type x: float
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")

        self._x = x

    @property
    def y(self) -> float:
        """
        Gets the y of this InlineResponse2003.
        current y-coordinate of the turtlebot position

        :return: The y of this InlineResponse2003.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y: float):
        """
        Sets the y of this InlineResponse2003.
        current y-coordinate of the turtlebot position

        :param y: The y of this InlineResponse2003.
        :type y: float
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")

        self._y = y

    @property
    def w(self) -> float:
        """
        Gets the w of this InlineResponse2003.
        current yaw of the turtlebot aspect

        :return: The w of this InlineResponse2003.
        :rtype: float
        """
        return self._w

    @w.setter
    def w(self, w: float):
        """
        Sets the w of this InlineResponse2003.
        current yaw of the turtlebot aspect

        :param w: The w of this InlineResponse2003.
        :type w: float
        """
        if w is None:
            raise ValueError("Invalid value for `w`, must not be `None`")

        self._w = w

    @property
    def v(self) -> float:
        """
        Gets the v of this InlineResponse2003.
        current velocity of the turtlebot

        :return: The v of this InlineResponse2003.
        :rtype: float
        """
        return self._v

    @v.setter
    def v(self, v: float):
        """
        Sets the v of this InlineResponse2003.
        current velocity of the turtlebot

        :param v: The v of this InlineResponse2003.
        :type v: float
        """
        if v is None:
            raise ValueError("Invalid value for `v`, must not be `None`")

        self._v = v

    @property
    def charge(self) -> int:
        """
        Gets the charge of this InlineResponse2003.
        current charge of the battery, in mWh. cannot be more than the maximum given in the TH response to `/ready`.

        :return: The charge of this InlineResponse2003.
        :rtype: int
        """
        return self._charge

    @charge.setter
    def charge(self, charge: int):
        """
        Sets the charge of this InlineResponse2003.
        current charge of the battery, in mWh. cannot be more than the maximum given in the TH response to `/ready`.

        :param charge: The charge of this InlineResponse2003.
        :type charge: int
        """
        if charge is None:
            raise ValueError("Invalid value for `charge`, must not be `None`")
        if charge is not None and charge < 0:
            raise ValueError("Invalid value for `charge`, must be a value greater than or equal to `0`")

        self._charge = charge

    @property
    def predicted_arrival(self) -> int:
        """
        Gets the predicted_arrival of this InlineResponse2003.
        current predicted arrival time, in simulation seconds

        :return: The predicted_arrival of this InlineResponse2003.
        :rtype: int
        """
        return self._predicted_arrival

    @predicted_arrival.setter
    def predicted_arrival(self, predicted_arrival: int):
        """
        Sets the predicted_arrival of this InlineResponse2003.
        current predicted arrival time, in simulation seconds

        :param predicted_arrival: The predicted_arrival of this InlineResponse2003.
        :type predicted_arrival: int
        """
        if predicted_arrival is None:
            raise ValueError("Invalid value for `predicted_arrival`, must not be `None`")

        self._predicted_arrival = predicted_arrival

    @property
    def sim_time(self) -> int:
        """
        Gets the sim_time of this InlineResponse2003.
        current simulation time

        :return: The sim_time of this InlineResponse2003.
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time: int):
        """
        Sets the sim_time of this InlineResponse2003.
        current simulation time

        :param sim_time: The sim_time of this InlineResponse2003.
        :type sim_time: int
        """
        if sim_time is None:
            raise ValueError("Invalid value for `sim_time`, must not be `None`")
        if sim_time is not None and sim_time < 0:
            raise ValueError("Invalid value for `sim_time`, must be a value greater than or equal to `0`")

        self._sim_time = sim_time

