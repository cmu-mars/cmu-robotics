# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CP1InternalStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, message: str=None, sim_time: int=None):  # noqa: E501
        """CP1InternalStatus - a model defined in Swagger

        :param status: The status of this CP1InternalStatus.  # noqa: E501
        :type status: str
        :param message: The message of this CP1InternalStatus.  # noqa: E501
        :type message: str
        :param sim_time: The sim_time of this CP1InternalStatus.  # noqa: E501
        :type sim_time: int
        """
        self.swagger_types = {
            'status': str,
            'message': str,
            'sim_time': int
        }

        self.attribute_map = {
            'status': 'status',
            'message': 'message',
            'sim_time': 'sim-time'
        }

        self._status = status
        self._message = message
        self._sim_time = sim_time

    @classmethod
    def from_dict(cls, dikt) -> 'CP1InternalStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CP1InternalStatus of this CP1InternalStatus.  # noqa: E501
        :rtype: CP1InternalStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this CP1InternalStatus.

        one of the possible status codes * learning-started - the learning phase has started * learning-done - the learning phase has been * adapt-started - the SUT has started adapting and cannot be perturbed * adapt-done - the SUT has finished adapting * charging-started - the turtlebot is currently charging * charging-done - the turtlebot has stopped charging * parsing-error - one or more of the function descriptions failed to parse * learning-error - an error was encountered in learning one or more of the hidden functions * other-error - an error was encountered that is not covered by the other error codees  # noqa: E501

        :return: The status of this CP1InternalStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this CP1InternalStatus.

        one of the possible status codes * learning-started - the learning phase has started * learning-done - the learning phase has been * adapt-started - the SUT has started adapting and cannot be perturbed * adapt-done - the SUT has finished adapting * charging-started - the turtlebot is currently charging * charging-done - the turtlebot has stopped charging * parsing-error - one or more of the function descriptions failed to parse * learning-error - an error was encountered in learning one or more of the hidden functions * other-error - an error was encountered that is not covered by the other error codees  # noqa: E501

        :param status: The status of this CP1InternalStatus.
        :type status: str
        """
        allowed_values = ["learning-started", "learning-done", "adapt-started", "adapt-done", "charging-started", "charging-done", "parsing-error", "learning-error", "other-error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def message(self) -> str:
        """Gets the message of this CP1InternalStatus.

        human readable text describing the status, if any  # noqa: E501

        :return: The message of this CP1InternalStatus.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this CP1InternalStatus.

        human readable text describing the status, if any  # noqa: E501

        :param message: The message of this CP1InternalStatus.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def sim_time(self) -> int:
        """Gets the sim_time of this CP1InternalStatus.

        the simulation time the status message was produced, for some siutations like learning-* we do not have simulation time because the simulation has not been started  # noqa: E501

        :return: The sim_time of this CP1InternalStatus.
        :rtype: int
        """
        return self._sim_time

    @sim_time.setter
    def sim_time(self, sim_time: int):
        """Sets the sim_time of this CP1InternalStatus.

        the simulation time the status message was produced, for some siutations like learning-* we do not have simulation time because the simulation has not been started  # noqa: E501

        :param sim_time: The sim_time of this CP1InternalStatus.
        :type sim_time: int
        """
        if sim_time is not None and sim_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `sim_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._sim_time = sim_time
